---
title: "Hands-On Exercise 2"
author: "KB"
editor: visual
---

Updated on 26-Nov-22

(First published on 25-Nov-22)

# 4.Global and Local Measures of Spatial Autocorrelation

*Everything is related to everything else. But near things are more related than distant things*

*\~(Waldo R. Tobler , 1970)*

## 4.1 Overview

Use appropriate functions from R spdep and tmap packages to:

-   Compute Global Spatial Autocorrelation (GSA) statistics

-   Compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outlines

-   Compute Getis-Ord's Gi-Statisitics for detecting hot spot or/and cold spot areas

-   Visualise the analysis output by using the tmap package

## 4.2 Getting started

Our task in this study is to apply appropriate spatial statistical methods to discover if development in Hunan province of China is evenly distributed geographically.

![](images/paste-CB618048.png)

We will use GDP per capita (GDPPC) as the measure of development.

### 4.2.1 Datasets available

They are:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

### 4.2.2 Install and load the relevant R packages for the exercise

```{r}
pacman::p_load(sf,spdep,tmap,tidyverse, ggplot2)
```

## 4.3 Getting the data in R environment

### 4.3.1 Import the ESRI shapefile

```{r}

hunan = st_read(dsn = "Hands-On_Ex2/data/geospatial",layer = "Hunan")
```

### 4.3.2 Import the Development Indicators .csv file

```{r}
hunan2012 = read_csv("Hands-On_Ex2/data/aspatial/Hunan_2012.csv",show_col_types = FALSE)
```

### 4.3.3 Perform relational join

To append the development indicators information into the hunan SpatialPolygonsDataFrame using a *left_join().*

```{r}
hunan = left_join(hunan,hunan2012)
```

### 4.3.4 Visualise Regional Development Indicator

We prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Quantile interval classification",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## 4.4 Global Spatial Autocorrelation

In this section, we learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

### 4.4.1 Compute Contiguity Spatial Weights

Before we compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighborhood relationships between the geographical units (i.e. counties) in the study area.

(This is covered in [Section 3.6.3](https://kaleidoscopic-bunny-isss624.netlify.app/in-class_ex/in-class_ex1#compute-contiguity-based-neighbors-using-queen-method) of In-Class Ex1)

In the code chunk below, [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbors list based on regions with contiguous boundaries.

```{r}
# Compute continguity weight matrices using Queen method
wm_q <- poly2nb(hunan, queen=TRUE)

summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. There are two area units - regions 30 and 65 - with only one neighbor. The most connected area unit - region 85 - has 11 neighbors.

### 4.4.2 Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon using the [nb2listw()](https://www.rdocumentation.org/packages/spdep/versions/1.2-7/topics/nb2listw) function.

(This is covered in [Section 3.7.1](https://kaleidoscopic-bunny-isss624.netlify.app/in-class_ex/in-class_ex1#row-standard-weight-matrix-rswm) of In-Class Ex1)

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

The input of *nb2listw()* must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.policy.

-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

### 4.4.3 Global Spatial Autocorrelation: Moran's I

The Global Moran's Iis a global statistic that provides us with a [single]{.underline} value for our entire dataset to describe if a variable of interest corresponds to the first law of geography - everything is related, but things that are closer together are more related than things further away. The Global Moran's Ioperates by comparing how similar every object (such as its GDPPC) is to its neighbors, and then averaging out all of these comparisons to give us an overall impression about the spatial pattern of the variable.

In this section, we learn how to compute Moran's I statistics testing by using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

#### 4.4.3.1 Maron's I test

The [Spatial Autocorrelation (Global Moran's I)](https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-spatial-autocorrelation-moran-s-i-spatial-st.htm) tool measures spatial autocorrelation based on both feature locations and feature values simultaneously. Given a set of features and an associated attribute, it evaluates whether the pattern expressed is clustered, dispersed, or random. The tool calculates the Moran's I Index value and both a a z-score and p-value to evaluate the significance of the Index. [P-values](https://pro.arcgis.com/en/pro-app/3.0/tool-reference/spatial-statistics/what-is-a-z-score-what-is-a-p-value.htm) are numerical approximations of the area under the curve for a known distribution, limited by the test statistic.

```{r}
# set zero.policy = TRUE if we want to assign zero to the lag value of zones without neighbors
#
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

The Spatial Autocorrelation (Global Moran's I) tool is an inferential statistic, which means that the results of the analysis are always interpreted within the context of its null hypothesis. For the Global Moran's I statistic, the null hypothesis states that the attribute being analyzed is randomly distributed among the features in the study area; said another way, the spatial processes promoting the observed pattern of values is random chance.

When the [p-value](https://pro.arcgis.com/en/pro-app/3.0/tool-reference/spatial-statistics/what-is-a-z-score-what-is-a-p-value.htm) returned by this tool is statistically significant, we can reject the null hypothesis. The table below summarizes interpretation of results:

![](images/paste-F2DB8E76.png){fig-align="center" width="628"}

|                                                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                         |
|--------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| The p-value is not statistically significant                             | We cannot reject the null hypothesis. It is quite possible that the spatial distribution of feature values is the result of random spatial processes. The observed spatial pattern of feature values could very well be one of many possible versions of complete spatial randomness.                                                                                                                                                   |
| The p-value *is* statistically significant, and the z-score is positive. | We may reject the null hypothesis. The spatial distribution of high values and/or low values in the dataset is more spatially clustered than would be expected if underlying spatial processes were random.                                                                                                                                                                                                                             |
| The p-value *is* statistically significant, and the z-score is negative. | We may reject the null hypothesis. The spatial distribution of high values and low values in the dataset is more spatially dispersed than would be expected if underlying spatial processes were random. A dispersed spatial pattern often reflects some type of competitive process---a feature with a high value repels other features with high values; similarly, a feature with a low value repels other features with low values. |

The Moran's I statistic is 0.3007, a positive value implying that there's some degree of clustering. The p-value is \<0.01 implying that we can reject the null hypothesis.

#### 4.4.3.2 Compute Monte Carlo Moran's I

The analytical approach to the Moran's I analysis benefits from being fast. But it may be sensitive to irregularly distributed polygons. [A safer approach](https://mgimond.github.io/simple_moransI_example/#step_4:_computing_the_moran%E2%80%99s_i_statistic) to hypothesis testing is to run an MC simulation using the `moran.mc()` function. The `moran.mc` function takes an extra argument `n`, the number of simulations.

The code chunk below performs permutation test for Moran's I statistic. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

The MC simulation generates a very small p-value, 0.001. The simulated Moran I statisitic of 0.30075 is close to the computed one in the previous section . We can see the results graphically by passing the Moran's I model to the plot function in the next section.

#### 4.4.3.3 Visualise Monte Carlo Moran's I

We first examine some summary statistics of the simulated Moran's I.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

Next we plot the distribution of the statistical values as a histogram by using the code chunk below.

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0.30075, 
       col="red")
```

The curve shows the distribution of Moran I values we could expect had the GDPPC been randomly distributed across the counties.

```{r}

# Convert the S3 object to a dataframe as ggplot can only work with the latter
bperm.res = as.data.frame(bperm$res)

# Plot the histogram
ggplot(data = bperm.res, aes(x=bperm$res)) +
  geom_histogram(bins = 25, color='black',fill="lightblue") +
  labs(y='Frequency',x="Simulated Mohan's I", title = "Histogram of bperm$rep") +
  theme(plot.title=element_text(hjust=0.5)) +
  geom_vline(xintercept = 0.30075, color="red")
  
```

Note that our observed statistic, 0.300, falls to the right of the distribution suggesting that the GDPPC values are clustered and the result is significant.

### 4.4.4 Global Spatial Autocorrelation: Geary's C

In this section, we learn how to compute Geary's C statistics testing by using [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

#### 4.4.4.1 Geary's C test

Geary's *C* is a measure of spatial [autocorrelation](https://en.wikipedia.org/wiki/Autocorrelation "Autocorrelation") or an attempt to determine if adjacent observations of the same phenomenon are correlated. The value of Geary's *C* lies between 0 and some unspecified value greater than 1.

Geary's C (Z value) is:

-   C = 1: observations are arranged randomly over space

-   Large c value (\>1) : Dispersed, observations tend to be dissimilar;

-   Small c value (\<1) : Clustered, observations tend to be similar;

-   0 \<= c value \<= 3

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

Since p-value \< 0.05, the level of significance, we reject the null hypothesis and conclude that the observed spatial pattern of GDPPC is **not** equally likely as any other spatial pattern (i.e. **not** spatially random). Also, given that the Geary's C statistic is \< 0.05, there's some clustering on the map.

#### 4.4.4.2 Compute Monte Carlo Geary's C

The code chunk below performs permutation test for Geary's C statistic by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**

```{r}
set.seed(1234)
bperm_c=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm_c
```

We see that the simulated Geary's C statistic is similar to the one computed in the previous section with p-value \< 0.05.

#### 4.4.4.3 Visualise the Monte Carlo Geary's C

We first examine some summary statistics of the simulated Geary's C values.

```{r}
mean(bperm_c$res[1:999])
```

```{r}
var(bperm_c$res[1:999])
```

```{r}
summary(bperm_c$res[1:999])
```

Next, we plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
hist(bperm_c$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=0.6907223, col="red")
```

The simulated results for Moran's I and Geary's C are the same. That is, the test statistics are significant and that there's some degree of clustering on the map.

## 4.5 Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation in our data or model residuals. They show how correlated pairs of spatial observations are when we increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.

### 4.5.1 Compute Moran's I Correlogram

In the code chunk below, [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC.

```{r}
# Method = "I" for Moran's I
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

To understand if all autocorrelation values are statistically significant, we examine the full analysis results with the following code chunk:

```{r}
print(MI_corr)
```

### 4.5.2 Compute Geary's C correlogram and plot

In the code chunk below, [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC.

```{r}
# Method = "C" for Geary's C
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

We print out the analysis report by using the code chunk below

```{r}
print(GC_corr)
```

The results above show that Moran's I and Geary's C values are inversely related.

## 4.6 Cluster and Outlier Analysis

Local Indicators of Spatial Association ("LISA") are statistics that evaluate the existence of clusters (and not clustering) in the spatial arrangement of a given variable.

In this section, we learn how to apply appropriate LISA, especially local Moran'I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.

### 4.6.1 Compute local Moran's I

The Local Moran's I statistic is relatively similar to the Global Moran's Iin that it is providing a measure of how similar locations are to their neighbors. However, the difference is that each location, *i*, receive its own Ivalue, as well as its own variance, z value, expected I, and variance of I

To compute local Moran's I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. The code chunks below are used to compute local Moran's I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

The column on the far right provides the p-values (ignore the z\>0 text and just think of these as p-values). We can relate these p-values to different confidence levels (e.g. 99%, 95%, etc.) in order to make a conclusion about the spatial distribution of attributes in ther dataset. 

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

#### 4.6.1.1 Map the local Moran's I

Before mapping the local Moran's I map, we append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The SpatialPolygonDataFrame is called *hunan.localMI*.

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

Using choropleth mapping functions of **tmap** package, we can plot the local Moran's I values by using the code chinks below.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "Local Moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran's I Statistics",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)
```

#### 4.6.1.2 Map the local Moran's I p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values.

The code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues",
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran's I p-values",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)
```

#### 4.6.1.3 Map both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "Local Moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran's I statistics",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran's I p-values",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## 4.7 Create a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### 4.7.1 Plot Moran scatterplot

The Moran scatterplot illustrates the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

Notice that the plot is split in 4 quadrants. The x-axis represents values the values at location *i*, while the y-axis represents values in the neighborhood of location *i*. Therefore, values in the top-right of the scatterplot represent locations in which the attribute at *i* and its neighbors are well above the mean, indicating positive spatial autocorrelation. In the above, the top right corner belongs to areas that have high GDPPC and are surrounded by other areas that also have above average level of GDPPC.

Points in the lower-left corner of the plot indicate locations in which the attribute at *i* and its neighbors are below the mean; this also represents locations of positive spatial autocorrelation because nearby locations are similar.

The solid diagonal line is a best-fit line through the points, indicating the presence of positive spatial autocorrelation throughout the entire dataset. Note that points represent with a diamond shape are values that are deemed to be significant at a specific level of confidence; the numbers next to these points simply represent their ID number. 

### 4.7.2 Plot Moran scatterplot with standardised variable

First we se [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector 
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

Now, we are ready to plot the Moran scatterplot again by using the code chunk below.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### 4.7.3 Prepare the LISA map classes

The code chunks below show the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, we centers the variable of interest around its mean.

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
```

This is follow by centering the local Moran's around the mean.

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])    
```

Next, we will set a statistical significance level for the local Moran.

```{r}
signif <- 0.05       
```

The following four command lines define the high-high, low-low, low-high and high-low categories.

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 2      
quadrant[DV <0 & C_mI>0] <- 1
quadrant[DV >0 & C_mI<0] <- 3
```

Lastly, places non-significant Moran in the category 0.

```{r}
quadrant[localMI[,5]>signif] <- 0
```

### 4.7.4 Plot LISA map

We plot both the local Moran's I values map and its corresponding p-values map next to each other.

```{r}
gdppc <- qtm(hunan, "GDPPC") +
  tm_layout(main.title = "2012 GDPPC of Hunan",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = "LISA Map",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)
  

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

## 4.8 Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

The term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

### 4.8.1 Getis and Ord's G-Statistics

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbors within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighborhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

### 4.8.2 Deriving distance-based weight matrix

First, we need to define a new set of neighbors. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbors based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

#### 4.8.2.1 Deriving the centroid of each county

(This is covered in [Section 3.5.3.1](https://kaleidoscopic-bunny-isss624.netlify.app/in-class_ex/in-class_ex1#prepare-the-latitude-and-longitude-of-the-polygon-centroids-om-a-separate-data-frame) of In-Class Ex1)

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

#### 4.8.2.2 Determine the cut-off distance

(This is covered in [Section 3.6.1](https://kaleidoscopic-bunny-isss624.netlify.app/in-class_ex/in-class_ex1#determine-the-cut-off-distance) of In-Class Ex1)

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbor.

#### 4.8.2.3 Compute fixed distance weight matrix

(This is covered in [Section 3.6.2.1](https://kaleidoscopic-bunny-isss624.netlify.app/in-class_ex/in-class_ex1#compute-the-distance-weight-matrix-by-using-dnearneigh) of In-Class Ex1)

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, we use *nb2listw()* to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

### 4.8.3 Compute adaptive distance weight matrix

(This is covered in [Section 3.6.3](https://kaleidoscopic-bunny-isss624.netlify.app/in-class_ex/in-class_ex1#compute-adaptive-distance-weight-matrix) of In-Class Ex1)

To control the numbers of neighbors directly using k-nearest neighbors, we can tweak the k argument in the *knearneigh()* function.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## 4.9 Compute Gi statistics

### 4.9.1 Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The Gi statistics is represented as a Z-score. Larger values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

The code chunk above performs three tasks:

-   First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*.

-   Next, *cbind()* is used to join hunan\@data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*.

-   Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

### 4.9.2 Map Gi values with fixed distance weights

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc <- qtm(hunan, "GDPPC") +
            tm_layout(main.title = "2012 GDPPC of Hunan\n ",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)  +
  tm_layout(main.title = "Local Gi Statistics\n(Fixed Distance)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

Hotspots from the local Gi chrolopleth map are almost in sync with the counties with highest GDPPC

### 4.9.3 Gi statistics using adaptive distance

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### 4.9.4 Map Gi values with adaptive distance weights

It is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(hunan, "GDPPC") +
            tm_layout(main.title = "2012 GDPPC of Hunan\n ",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)  +
  tm_layout(main.title = "Local Gi Statistics\n(Adpative Distance)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.26, 
            legend.width = 0.40)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

## 4.10 References

-   Spatial Autocorrelation: How spatial objects affect other nearby spatial objects

    [Spatial Autocorrelation: How spatial objects affect other nearby spatial objects \| by Anubhav Pattnaik \| Locale \| Medium](https://medium.com/locale-ai/spatial-autocorrelation-how-spatial-objects-affect-other-nearby-spatial-objects-e05fa7d43de8)

-   How Spatial Autocorrelation (Global Moran's I) works

    [How Spatial Autocorrelation (Global Moran's I) works---ArcGIS Pro \| Documentation](https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-spatial-autocorrelation-moran-s-i-spatial-st.htm)

-   A basic introduction to Moran's I analysis in R

    [A basic introduction to Moran's I analysis in R (mgimond.github.io)](https://mgimond.github.io/simple_moransI_example/#step_4:_computing_the_moran%E2%80%99s_i_statistic)

-   Global vs Local Spatial Autocorrelation

    [GLOBAL VS LOCAL SPATIAL AUTOCORRELATION (arcgis.com)](https://storymaps.arcgis.com/stories/5b26f25bb81a437b89003423505e2f71)
