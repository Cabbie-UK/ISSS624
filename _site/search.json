[
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html",
    "href": "Hands-On_Ex/Hands-On_Ex3.html",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "",
    "text": "Updated on: 13-Dec-2022\n(First published on: 2-Dec-2022)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#overview",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#overview",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.1 Overview",
    "text": "5.1 Overview\nIn this hands-on exercise, we will learn how to delineate homogeneous regions by using geographically referenced multivariate data.\nThere are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\n\n5.1.1 Learning outcomes\nBy the end of this hands-on exercise, we will be able to:\n\nconvert GIS polygon data into R’s simple feature (sf) data.frame by using appropriate functions of sf package;\nconvert sf data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package;\nperform custer analysis by using hclust() of Base R;\nperform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis outputs by using ggplot2 and tmap package"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#getting-started",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#getting-started",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.2 Getting started",
    "text": "5.2 Getting started\n\n5.2.1 The analytical question\nIn this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#the-data",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#the-data",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.3 The data",
    "text": "5.3 The data\nThe 2 data sets used in this exercise are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)\n\n5.3.1 Installing and loading R packages\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling - sf, rgdal and spdep\nAttribute data handling - tidyverse, especially readr, ggplot2 and dplyr\nChoropleth mapping - tmap\nMultivariate data visualisation and analysis - corrplot, ggpubr, GGally and heatmaply\nCluster analysis - cluster, and ClustGeo\n\nThe code chunk below installs and launches these R packages into R environment.\n\npacman::p_load(rgdal, spdep, tmap, sf, \n               ggpubr, cluster, factoextra, NbClust, GGally,\n               heatmaply, corrplot, psych, tidyverse, ClustGeo)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#data-import-and-prepatation",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#data-import-and-prepatation",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.4 Data Import and Prepatation",
    "text": "5.4 Data Import and Prepatation\n\n5.4.1 Importing geospatial data into R environment\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunk used is shown below:\n\nshan_sf <- st_read(dsn = \"Hands-On_Ex3/data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %>%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\Cabbie-UK\\ISSS624\\Hands-On_Ex\\Hands-On_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\nNotice that sf.data.frame conforms to Hardy Wickham’s tidy framework. Since shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n5.4.2 Importing aspatial data into R environment\nThe csv file will be import using read_csv() of readr package.\nThe code chunk used is shown below:\n\nict <- read_csv (\"Hands-On_Ex3/data/aspatial/Shan-ICT.csv\", show_col_types = FALSE)\n\nThe attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveals the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\n\n5.4.3 Derive new variables using dplyr package\nThe unit of measurement of the values is the number of households. Using such a measure directly will bias townships with smaller number of households which also means there are fewer households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*100) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*100) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*100) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*100) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*100) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*100) %>%\n  # rename some of the columns to match them to those used in the shapefile\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n6 new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR.\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 2.105  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:13.895  \n Median : 3559   Median : 244.0   Median : 316.0   Median :21.095  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :21.568  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:26.807  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :48.452  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :11.60   Min.   : 0.278   Min.   : 3.642   Min.   :0.3278  \n 1st Qu.:45.02   1st Qu.: 2.284   1st Qu.:19.014   1st Qu.:1.1832  \n Median :51.72   Median : 3.759   Median :30.527   Median :1.8970  \n Mean   :50.95   Mean   : 5.109   Mean   :31.405   Mean   :2.4393  \n 3rd Qu.:60.64   3rd Qu.: 6.972   3rd Qu.:42.843   3rd Qu.:2.9897  \n Max.   :84.25   Max.   :18.149   Max.   :73.543   Max.   :9.2402  \n  INTERNET_PR     \n Min.   : 0.1041  \n 1st Qu.: 0.8617  \n Median : 2.2829  \n Mean   : 3.0644  \n 3rd Qu.: 4.1281  \n Max.   :11.7985"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#exploratory-data-analysis-eda",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#exploratory-data-analysis-eda",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.5 Exploratory Data Analysis (EDA)",
    "text": "5.5 Exploratory Data Analysis (EDA)\n\n5.5.1 EDA using statistical graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") + \n  ggtitle(\"Distribution of Households with radio\")\n\n\n\n\nBoxplot is useful to detect if there are outliers in the data.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\") + \n  ggtitle(\"Distribution of Househodls with radio (Boxplot)\")\n\n\n\n\nNext, we also plot the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") + \n  ggtitle(\"Distribution of Radio Penetration Rate\")\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\") + \n  ggtitle(\"Distribution of Radio Penetration Rate \\n(Boxplot)\")\n\n\n\n\n\n\n\n\n\n\nWhat can you observe from the distributions reveal in the histogram and boxplot?\nReply: The distribution of the Radio Penetration Rate appears less skewed than the distribution of households with radio. From the boxplot, the number of outliers has reduced from 3 to 1.\n\n\n\nIn the next code chunk below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nStep 1: We create the individual histograms using the code chunk below.\nStep 2: We use the the ggarange() function of ggpubr package to group these histograms together\n\n\n# Step 1\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n# Step 2\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n5.5.2 EDA using choropleth map\n\n5.5.2.1 Joining geospatial data with aspatial data\nBefore we prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\n# if we want to retain the spatial data, the geospatial data file should be the left file. In this case, it's the shan_sf sf file.\nshan_sf_joined <- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\n\n\n\n\n\n\nThere is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\n\n\n\n\n\n\n\n5.5.2.2 Preparing a choropleth map\nFor a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map is prepared.\nThe code chunk below is used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf_joined, \"RADIO_PR\") +\n  tm_layout(main.title = \"Radio Penetration Rate\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.30, \n            legend.width = 0.30)\n\n\n\n\nTo demonstrate that the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf_joined) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Total number of households\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.30, \n            legend.width = 0.30)\n\nRADIO.map <- tm_shape(shan_sf_joined) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Households with radio\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Number of households with radio\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.30, \n            legend.width = 0.30)\n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the distribution of Number of households with radios and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf_joined) +\n    tm_polygons(c(\"RADIO\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n    tm_legend(legend.position = c(\"right\", \"bottom\"))+\n    tm_layout(title = c(\"Number of households with radio\",\"Radio Penetration Rate\"),\n              outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\n\n\nCan you identify the differences?\nFrom the 2 plots above, it is evident that regions with highest number of households in radios (on the left map) does not necessarily have the highest radio ownership rate (based on the right map)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#correlation-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#correlation-analysis",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.6 Correlation Analysis",
    "text": "5.6 Correlation Analysis\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, we use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\n# Only select columns 12 to 16 from the data.frame\ncluster_vars.cor = cor(ict_derived[,12:17])\n\ncorrplot.mixed(cluster_vars.cor,\n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#hierarchy-cluster-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#hierarchy-cluster-analysis",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.7 Hierarchy Cluster Analysis",
    "text": "5.7 Hierarchy Cluster Analysis\nIn this section, we learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n5.7.1 Extract clustering variables\nThe code chunk below extracts the clustering variables from the shan_sf_joined simple feature object into data.frame.\n\ncluster_vars <- shan_sf_joined %>%\n  # The st_set_geometry is to remove the geomerty data from the final output\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 28.61852 55.41313   3.530618  26.06944    1.215939\n2    Pindaya 41.74647 50.51300   1.983584  16.23917    1.288190\n3    Ywangan 48.45215 26.05734   1.193591  12.02856    0.441465\n4   Pinlaung 23.16499 54.17189   2.854454  24.94903    1.376255\n5     Mabein 44.94903 70.86423   7.275255  39.26089    1.645042\n6      Kalaw 28.07624 61.16204   4.206478  40.87951    2.963160\n7      Pekon 31.86118 53.58494   3.983270  21.48476    1.897032\n8   Lawksawk 38.71017 63.00035   3.151366  32.05686    2.176677\n9  Nawnghkio 34.93359 54.79456   3.844960  32.30201    1.576465\n10   Kyaukme 21.09548 60.11773   3.958267  37.24930    3.094709\n\n\n\n\n\n\n\n\nThe st_set_geometry() function removes the geometry information and converts the sf data.set to a data.frame.\n\n\n\n\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we set township name (Ts.x column) as the row names using the code chunk below so that the clustering algorithm won’t use the township name for clustering.\n\n# Step 1: Assign the TS.x column as the row names of the cluster_var dataframe\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\n\n# Step 2:Exclude the TS.x coumn from the new shan_ict dataframe\nshan_ict <- select(cluster_vars, c(2:6))\n\n# Inspect the resultant dataframe\nhead(shan_ict)\n\n         RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit  28.61852 55.41313   3.530618  26.06944    1.215939\nPindaya  41.74647 50.51300   1.983584  16.23917    1.288190\nYwangan  48.45215 26.05734   1.193591  12.02856    0.441465\nPinlaung 23.16499 54.17189   2.854454  24.94903    1.376255\nMabein   44.94903 70.86423   7.275255  39.26089    1.645042\nKalaw    28.07624 61.16204   4.206478  40.87951    2.963160\n\n\n\n\n5.7.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result that leans towards clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n5.7.2.1 Min-Max standardisation\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n5.7.2.2 Z-score standardisation\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below is used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\n\n\n\n\n\n\ndescribe() of psych package is used here instead of summary() of Base R because the former provides standard deviation.\n\n\n\n\n\n\n\n\n\n\n\n\nZ-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n\n\n\n\n\n\n5.7.2.3 Visualise the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Radio_PR without \\nstandardisation\") +\n  theme(plot.title = element_text(size=10,face=\"bold\"))\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Radio_PR with \\nMin-Max Standardisation\") +\n  theme(plot.title = element_text(size=10,face=\"bold\"))\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Radio_PR with \\nZ-score Standardisation\") +\n  theme(plot.title = element_text(size=10,face=\"bold\"))\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nNotice that the overall distribution of the clustering variables will change after the data standardisation.\n\n\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\nReply: Standardising the effect of making the distribution of the variable more symmetrical.\n\n\n\nHowever, it is advisable NOT to perform data standardisation if the value range of the clustering variables are not vastly different\nWe can plot the density curve using the following code chunk.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without \\nstandardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max \\nStandardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score \\nStandardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n5.7.3 Compute proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    17.186828                                                  \nYwangan    38.188259 25.731610                                        \nPinlaung    5.746286 20.863519 40.005492                              \nMabein     26.337099 31.345776 52.914689 31.266966                    \nKalaw      16.005997 30.251785 49.953297 18.196406 19.814085          \nPekon       5.961977 11.791580 33.650410  9.461225 28.226877 21.191531\nLawksawk   14.011550 20.432952 43.216535 19.257320 13.036525 14.001101\nNawnghkio   8.907103 18.064047 37.787702 13.927495 20.463154 12.774787\nKyaukme    14.402475 31.101487 50.589191 13.967966 26.488283  7.942225\nMuse       56.301629 70.411252 89.944137 57.158335 45.327410 41.246033\nLaihka     14.187227 29.861288 49.183321 10.110150 34.500222 19.734633\nMongnai    11.586190 25.849346 42.271934  6.452387 35.886053 20.034668\nMawkmai    43.492968 43.799577 39.703752 39.811227 69.324602 56.259200\nKutkai      9.761092 21.281775 36.011861  7.807733 34.055064 20.493018\nMongton    19.267961 28.335574 36.123257 16.342143 42.516902 26.787522\nMongyai    25.672744 28.741816 33.312853 22.056339 51.640426 38.674701\nMongkaing  50.361965 48.171125 36.498429 47.629056 74.717454 62.524500\nLashio     25.129457 39.898167 60.217475 26.251735 23.128227 10.669059\nMongpan    19.332063 33.572896 48.368125 19.278316 30.152942 11.469105\nMatman     40.125041 35.439039 25.522031 38.240610 63.753975 53.763884\nTachileik  52.963213 63.551774 80.744220 55.501039 36.532538 37.364459\nNarphan    40.615714 47.450209 45.295769 37.126895 63.034312 46.353759\nMongkhet   34.945980 39.174783 40.897731 30.586058 61.030557 46.552013\nHsipaw     11.818050 24.598884 38.863147  7.655260 36.642787 21.236711\nMonghsat   21.420854 31.471506 43.298028 16.044703 47.048135 31.796188\nMongmao    24.254541 40.221719 54.285957 21.758854 38.491867 19.518913\nNansang    10.491839 27.544246 47.277637  8.549572 28.792364 12.430500\nLaukkaing  56.827732 72.685355 90.882520 56.381750 52.067373 42.777791\nPangsang   27.267383 42.824958 55.682263 24.447146 41.854016 22.403998\nNamtu      17.962251 22.540822 44.466868 17.004533 36.616094 30.727427\nMonghpyak  17.776325 22.130579 36.744835 22.220020 21.269450 16.708436\nKonkyan    40.339082 50.086933 52.812533 36.544693 61.351206 44.475859\nMongping   26.512574 31.064850 33.794020 22.975261 51.816310 37.564739\nHopong     13.693111 22.306050 35.285844  9.814855 39.800917 26.416294\nNyaungshwe  9.938590 21.652463 40.711649 13.812050 21.021337  9.566782\nHsihseng   13.149728 17.200796 34.291035 11.161846 38.120187 28.711074\nMongla     38.430076 54.942389 72.816301 37.259678 40.609124 26.026411\nHseni      18.937188 33.798982 53.444679 20.447572 21.361240  3.852842\nKunlong    22.412169 35.547066 53.163089 19.476257 39.661508 27.301375\nHopang     28.105362 44.326362 59.619312 26.596924 36.855167 18.514704\nNamhkan    38.602794 54.381859 71.443173 38.278835 37.956035 24.639577\nKengtung   24.645691 38.568322 57.323173 26.348638 21.947071  8.829335\nLangkho    16.426299 32.328133 50.778892 16.844228 25.384371  6.719580\nMonghsu    10.915790 19.835391 34.042789  8.086834 36.719820 23.734578\nTaunggyi   39.984278 50.375471 69.798323 42.954386 22.624011 25.226066\nPangwaun   38.151246 51.213162 58.013146 35.637963 52.344632 33.835194\nKyethi     20.292551 17.554012 28.729358 18.947065 44.207679 36.017247\nLoilen     14.548666 29.361143 46.951621  9.156527 37.506406 21.719877\nManton     43.064070 40.242888 30.616379 40.583081 67.401120 56.016577\nMongyang   30.951302 47.593982 63.071590 28.603834 41.188352 23.356349\nKunhing    17.350424 31.823811 44.967218 14.158836 37.582140 19.763683\nMongyawng  21.421738 33.292193 57.056521 23.555497 19.349994 17.343078\nTangyan    19.592520 20.843740 32.477002 16.950567 44.859948 34.806617\nNamhsan    23.778494 22.841073 28.616305 21.433352 48.833873 38.588676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   15.751129                                                  \nNawnghkio  11.315370  9.082891                                        \nKyaukme    20.212206 18.629066 15.704230                              \nMuse       61.456144 51.013288 53.368806 43.475768                    \nLaihka     18.223667 24.674469 21.188187 12.824979 52.665211          \nMongnai    15.160031 24.171260 18.221245 14.245669 57.197975 10.053457\nMawkmai    41.600669 56.752693 49.515047 51.202846 92.693007 42.996554\nKutkai     11.498048 22.464646 14.744053 17.093318 59.290743 14.467198\nMongton    20.814888 31.107742 22.581118 22.928509 63.471074 21.207320\nMongyai    24.252301 39.126989 31.957938 33.927780 76.391399 26.413364\nMongkaing  48.023965 62.518712 54.669447 58.605094 99.566496 52.296309\nLashio     30.380011 22.075270 23.055346 12.995255 31.315288 23.864533\nMongpan    24.330037 22.854223 17.284425 11.037831 44.749969 21.076951\nMatman     36.825761 51.539711 44.405061 50.552285 92.911283 44.325453\nTachileik  57.339528 44.182621 47.045533 42.915493 22.119950 54.908985\nNarphan    41.684901 52.369580 43.559661 42.030003 77.040234 39.232592\nMongkhet   34.208722 48.741102 41.410280 40.903553 81.644931 32.497428\nHsipaw     14.537542 24.935081 17.609570 16.395741 59.103355 12.842987\nMonghsat   22.564279 35.231496 28.983220 25.325370 66.376026 15.893517\nMongmao    29.370625 31.464777 25.776465 14.609228 45.182530 18.599082\nNansang    16.037607 18.878869 15.113185  6.032773 48.935308  7.878999\nLaukkaing  62.482399 54.883928 55.265554 42.874978 14.926996 50.739700\nPangsang   32.181214 34.591486 28.710769 17.535273 46.024292 21.419291\nNamtu      16.502707 26.095300 25.752713 27.087277 65.916927 18.586794\nMonghpyak  19.093173 14.231691  9.303711 21.764419 53.943485 29.322640\nKonkyan    42.148797 52.031264 43.934272 39.379911 70.486973 35.175354\nMongping   25.968288 39.647081 31.614719 33.028984 74.444948 27.282761\nHopong     13.886577 27.491604 20.488286 21.884211 64.868011 15.748857\nNyaungshwe 13.931874 10.417830  4.326545 12.650414 50.588581 20.171653\nHsihseng   10.530573 25.711202 20.988026 25.027059 67.766886 17.589761\nMongla     44.120998 39.318472 38.140808 24.158966 25.680556 31.593218\nHseni      24.398001 17.150398 16.405304  8.120593 38.130567 20.449010\nKunlong    24.936301 31.830406 28.504608 21.563037 54.724297 12.268682\nHopang     33.638582 32.116462 27.984188 15.491633 37.744407 23.078652\nNamhkan    44.277120 37.941126 36.733575 24.781990 23.867060 34.243665\nKengtung   29.767761 20.938215 20.829647 13.623356 33.008211 25.823950\nLangkho    21.921623 19.030257 15.651662  5.167279 41.364173 16.094435\nMonghsu    11.384636 24.204063 17.009168 20.077712 63.321624 16.328926\nTaunggyi   44.066133 30.496838 34.479200 31.260547 25.081471 42.536916\nPangwaun   42.381347 45.302765 38.167478 30.831407 54.197887 35.178203\nKyethi     16.243575 31.774604 26.721607 32.814177 75.716745 25.583275\nLoilen     18.194596 26.529318 21.926405 14.692675 56.043400  5.969478\nManton     40.382131 55.113000 47.577296 52.286003 94.149778 45.830232\nMongyang   36.358788 36.337684 32.332123 18.859489 38.959919 22.971502\nKunhing    21.346379 27.868953 20.615773 14.500266 53.300162 14.203682\nMongyawng  24.843910 17.907229 22.061209 18.155295 42.237358 21.199976\nTangyan    16.779937 32.314701 26.907880 30.678359 73.693741 22.429176\nNamhsan    20.716559 36.284062 29.974967 34.785944 77.852971 27.379672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    37.450873                                                  \nKutkai      9.115307 36.495519                                        \nMongton    13.167061 31.335220 10.706341                              \nMongyai    20.323607 17.870499 18.894166 15.979790                    \nMongkaing  45.600842 13.329995 42.896133 36.550032 26.284016          \nLashio     27.086983 63.860773 28.982513 34.711584 46.636472 70.865819\nMongpan    17.809554 50.999632 18.518173 20.031803 34.639710 56.356780\nMatman     37.633870 14.783545 34.086349 30.304574 18.695158 13.551424\nTachileik  56.395232 91.938755 56.899109 60.876740 75.029555 96.714087\nNarphan    32.931700 27.375350 31.427683 21.597925 24.882845 28.565085\nMongkhet   27.576855 11.558388 27.391673 22.322828 10.498924 22.260577\nHsipaw      5.268195 35.134601  5.146282  9.069766 17.733790 42.377868\nMonghsat   12.525968 27.509705 15.432012 15.098053 12.735225 37.560376\nMongmao    18.829603 48.552853 20.469232 20.657001 33.561300 55.231959\nNansang     9.279567 46.241938 13.004549 19.958124 28.855962 54.216609\nLaukkaing  55.156800 88.251110 58.038112 60.466190 73.268347 95.411795\nPangsang   20.425746 48.414757 22.833583 21.077938 34.330638 54.840662\nNamtu      20.935473 42.795451 22.528268 30.871751 27.802761 52.504057\nMonghpyak  25.326470 53.671695 20.661627 25.804282 37.001575 56.821089\nKonkyan    32.882831 33.901411 31.060810 24.825265 28.787384 38.092091\nMongping   20.299615 19.431049 18.275266 11.986993  6.538727 25.718572\nHopong      9.153795 30.284362  7.345899 10.621031 12.462791 37.937916\nNyaungshwe 16.963695 50.299026 15.215482 21.972196 32.713541 55.732112\nHsihseng   14.236728 32.929477 12.821054 19.464317 16.227126 41.159788\nMongla     35.410985 68.688950 38.840984 41.106668 53.528615 76.148327\nHseni      21.681639 58.253670 22.937894 28.675945 40.823212 64.804408\nKunlong    20.292529 44.653763 20.454010 27.002165 29.936066 53.991284\nHopang     24.300945 56.124281 26.331986 27.350305 40.873288 62.617673\nNamhkan    37.005669 70.647792 39.248568 41.453594 55.062819 77.139688\nKengtung   27.228711 63.254638 27.919573 32.938387 46.039706 69.274693\nLangkho    17.467678 53.108019 18.051419 23.670878 35.895672 59.742714\nMonghsu     8.411238 33.207962  6.260859 10.704894 15.486049 40.071816\nTaunggyi   44.855282 81.074692 45.033382 50.840925 63.594105 86.621117\nPangwaun   31.213429 50.068857 32.180465 25.750434 39.407696 53.695736\nKyethi     21.050453 27.885535 18.423422 22.252947 13.779420 35.206533\nLoilen      5.841263 38.873386 13.156529 17.616001 22.479239 48.218190\nManton     39.154062 10.908779 36.182684 31.020581 19.559882  8.175337\nMongyang   26.039387 55.883162 28.533223 29.560023 41.431237 63.191325\nKunhing    11.055197 39.843973 10.884990 11.403609 23.899570 46.503971\nMongyawng  27.577546 62.004321 28.103383 37.522688 44.578964 70.098284\nTangyan    18.037471 26.266006 16.661820 19.888460 10.908506 34.856123\nNamhsan    21.810003 21.519289 19.132762 19.676188  7.735900 28.866231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    17.233279                                                  \nMatman     62.811049 49.481014                                        \nTachileik  31.195286 41.103849 89.012935                              \nNarphan    52.563854 37.113393 31.205193 76.029566                    \nMongkhet   53.444463 41.217123 20.302855 82.050164 21.728718          \nHsipaw     29.086435 17.952054 34.445451 57.618780 29.540170 25.380950\nMonghsat   37.786793 28.330992 31.359911 67.709508 27.821548 16.798445\nMongmao    21.423677 13.159966 50.159903 47.295568 33.142618 37.535820\nNansang    18.447950 14.477393 45.806573 48.677266 39.813308 36.099219\nLaukkaing  33.465738 43.558047 90.372094 32.506329 70.882887 76.906406\nPangsang   23.672516 14.023910 50.629940 48.131907 31.630314 37.558139\nNamtu      36.588437 35.291394 41.665397 65.956458 49.436143 35.599713\nMonghpyak  26.209281 18.785699 47.046845 44.404411 44.840651 46.263265\nKonkyan    48.551312 36.587588 39.240306 73.092980 15.882353 25.424424\nMongping   45.452548 31.847482 20.165224 72.708969 18.864567 11.380917\nHopong     34.531042 23.943845 29.184351 63.245718 29.440441 21.299485\nNyaungshwe 20.158191 13.729734 46.091883 44.581335 42.794086 41.708639\nHsihseng   36.900833 29.587811 30.402806 65.887060 37.752977 25.670338\nMongla     17.995877 25.320001 70.817595 34.733155 53.146949 57.440292\nHseni       7.941836 12.066550 56.464051 35.490063 47.412297 48.188406\nKunlong    29.523103 28.803320 46.827436 59.570536 41.307823 34.168641\nHopang     17.063913 13.562913 57.355355 40.382035 39.785908 45.151070\nNamhkan    17.327153 24.034131 71.542102 29.591660 53.685519 59.619944\nKengtung    5.985893 14.221554 61.301033 29.590429 50.540025 53.135998\nLangkho    11.518145  9.498486 51.886151 40.233622 42.065204 42.808061\nMonghsu    32.571557 21.625326 30.813805 60.502113 31.192379 24.773318\nTaunggyi   19.514541 31.981385 77.845810 15.084117 68.420905 71.280752\nPangwaun   36.245608 23.252209 52.343600 54.060474 26.464997 40.702947\nKyethi     44.710266 35.889620 23.383079 72.887329 37.490376 23.325039\nLoilen     26.892310 20.725000 40.656282 57.375476 35.479137 28.476895\nManton     64.666493 50.796808  5.952318 91.023039 28.026395 18.133894\nMongyang   20.933700 19.493467 58.561776 44.879027 40.139475 44.540621\nKunhing    25.510832 13.785278 40.366587 53.226397 28.162645 29.249814\nMongyawng  17.270139 27.515989 60.180824 43.210118 57.276394 52.291815\nTangyan    42.984475 34.039128 24.278233 71.984066 34.884991 20.149393\nNamhsan    47.204024 36.477086 18.009747 75.403913 31.654695 17.090848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   12.178922                                                  \nMongmao    18.599483 24.717708                                        \nNansang    12.024428 20.192690 16.499494                              \nLaukkaing  56.906099 62.644910 40.400848 48.060074                    \nPangsang   20.504337 25.637933  5.760801 19.336162 40.804016          \nNamtu      22.944658 23.178673 36.503882 21.761884 66.406286 39.297391\nMonghpyak  23.767919 35.684917 29.188846 22.752638 56.584279 31.511651\nKonkyan    29.674316 26.825060 28.187425 37.470456 63.592043 27.481900\nMongping   16.892101 14.095392 30.557166 28.736626 70.813447 30.833123\nHopong      6.286179 10.045714 24.416253 16.766291 62.848557 26.151075\nNyaungshwe 16.992664 28.637238 23.045003 13.118943 52.024345 25.777823\nHsihseng   13.654610 15.349551 31.198001 19.353779 67.074564 33.552974\nMongla     37.347509 42.900536 21.624705 28.945119 20.255831 21.788123\nHseni      23.148538 33.122632 18.467099 13.645492 39.174585 21.466375\nKunlong    20.510051 20.231862 22.443391 18.301388 52.188657 25.849342\nHopang     24.872536 31.764824  7.829342 19.647091 33.167199  9.257672\nNamhkan    38.279302 45.510875 22.332205 30.289487 19.646063 23.138484\nKengtung   28.408582 38.372138 20.758055 19.367980 35.148520 22.985484\nLangkho    18.305109 27.952329 13.450170  9.939859 41.041270 16.765920\nMonghsu     5.855724 13.724737 24.243599 15.359962 61.901766 26.052971\nTaunggyi   46.231183 56.288102 38.733906 36.504897 34.598041 40.559730\nPangwaun   29.812447 34.353898 18.740057 32.612960 47.063605 15.748757\nKyethi     19.517677 19.050609 37.789657 27.302385 74.999415 39.689963\nLoilen      9.804789 11.865144 19.026490  9.423028 53.557527 20.794433\nManton     35.960008 31.715603 50.379786 47.655544 90.738406 50.475214\nMongyang   26.710497 31.264797  9.106281 21.849285 32.619219 10.837735\nKunhing     9.077517 16.538834 10.391040 12.820940 50.041640 12.318870\nMongyawng  29.470967 36.440429 29.640789 19.111990 45.480044 33.616703\nTangyan    16.769794 14.459626 34.714183 24.970235 72.240954 36.476893\nNamhsan    19.447928 16.956962 37.171448 29.416284 76.045960 38.565526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  34.657799                                                   \nKonkyan    47.837690 46.339594                                         \nMongping   32.166441 35.476537 24.202901                               \nHopong     20.682668 26.795563 30.449287 13.400139                     \nNyaungshwe 27.141464 10.397300 43.235040 31.932583 20.932532           \nHsihseng   13.189940 28.537627 38.349700 19.964389  9.165458  22.580242\nMongla     48.349434 40.803397 46.809747 51.261580 43.231105  34.760273\nHseni      32.741448 20.026876 44.884563 39.558453 28.641193  13.086310\nKunlong    23.360474 35.744661 32.911433 30.905385 21.906817  28.513095\nHopang     40.824516 30.426577 34.818522 37.927212 30.977356  24.719891\nNamhkan    50.632466 37.950202 48.159596 52.374815 44.413246  33.332428\nKengtung   38.533554 22.147613 47.482621 44.280821 34.047382  17.775714\nLangkho    30.503473 20.027496 38.695022 34.396455 23.963685  12.826577\nMonghsu    20.964684 23.217823 33.172187 15.890478  4.340665  17.382799\nTaunggyi   51.872748 33.417439 65.056905 62.153039 51.376415  32.509619\nPangwaun   51.703554 38.195144 26.397576 34.037881 34.600673  35.292324\nKyethi     18.690932 32.816234 40.010989 18.743974 13.649038  28.806872\nLoilen     19.424075 29.699681 33.419820 23.199959 12.474445  20.640432\nManton     44.858230 50.220840 36.666876 20.048082 31.058885  48.879874\nMongyang   41.326052 35.817599 32.939338 38.780686 32.335704  29.429500\nKunhing    29.643996 25.074435 25.374202 21.259619 14.515617  18.997131\nMongyawng  26.224331 28.556475 52.238580 45.559190 32.659925  21.812104\nTangyan    17.869483 33.526416 36.746064 16.167411 10.682328  28.414692\nNamhsan    24.095555 35.270492 35.220115 13.023777 13.270541  31.591750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     47.866210                                                  \nHseni      31.274375 22.682048                                        \nKunlong    23.185967 34.646200 27.619175                              \nHopang     37.001334 14.702444 16.280878 27.134451                    \nNamhkan    49.209476  7.721355 21.211323 37.573885 14.618632          \nKengtung   37.072441 20.245004  6.612817 31.714187 16.429921 17.563015\nLangkho    27.627441 22.901675  6.666133 22.452741 13.424847 22.440029\nMonghsu     9.782470 42.451868 26.228462 23.989665 30.184458 43.132637\nTaunggyi   52.814240 29.709863 23.819389 47.129032 32.995252 25.729147\nPangwaun   43.306326 31.918643 33.070182 39.245403 20.698364 31.044067\nKyethi      8.404049 55.602500 38.833498 29.855859 44.048114 56.786202\nLoilen     15.884853 33.867408 22.710984 16.653599 24.289326 36.490647\nManton     33.487758 71.251416 58.463341 47.976855 57.752046 72.186149\nMongyang   38.259743 14.666661 21.019929 24.722785  6.925859 16.772448\nKunhing    22.015490 30.647566 20.647448 19.377551 17.296164 31.492119\nMongyawng  30.951462 31.557550 17.386004 24.039800 29.051360 32.121112\nTangyan     7.027241 52.680849 37.307575 26.807983 41.222167 54.264078\nNamhsan    12.574240 56.402740 41.196125 31.040560 44.051555 57.642717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    10.716213                                                  \nMonghsu    31.691914 22.184918                                        \nTaunggyi   18.628225 28.827478 48.691951                              \nPangwaun   33.748335 29.538434 34.338498 49.761245                    \nKyethi     44.426274 35.091512 14.661572 59.957407 47.662610          \nLoilen     28.222935 18.410672 13.155208 45.591617 33.169981 23.232965\nManton     63.199123 53.595620 33.076503 80.308034 51.079265 27.203299\nMongyang   21.708047 17.535413 32.395988 37.458247 22.525026 45.386726\nKunhing    24.595083 14.638284 14.678891 42.998509 22.909986 27.895182\nMongyawng  20.387199 18.611584 31.285089 28.773864 47.533116 38.771518\nTangyan    42.995076 33.202048 12.742203 59.265262 44.705580  4.779331\nNamhsan    46.620497 36.820978 15.322576 63.149232 44.858030  6.867929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     41.906087                                                  \nMongyang   24.676592 58.570558                                        \nKunhing    13.039336 41.049230 18.889405                              \nMongyawng  26.175211 62.943339 30.421734 29.535984                    \nTangyan    19.660826 27.182672 42.106366 24.974161 37.752279          \nNamhsan    24.215271 21.048485 45.097869 27.079121 43.002019  6.367613\n\n\n\n\n5.7.4 Computing hierarchical clustering\nIn R, there are several packages which provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employs agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: (i) ward.D, (ii) ward.D2, (iii) single, (iv) complete, (v) average(UPGMA), (vi) mcquitty(WPGMA), (vii) median(WPGMC) and (viii) centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which contains the tree produced by the clustering process.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n# cex is to scale down the plot to 60%, to prevent the township labels from overlapping\n\n\n\n5.7.5 Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure) by comparing the homogeneity within the clusters .\nThe code chunk below will be used to compute the agglomerative coefficients of 4 hierarchical clustering algorithms.\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nFrom the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n5.7.6 Determine the Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n5.7.6.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n\n# K.max refers to the maximum number of clusters to consider, must be at least two.\n# B refers to integer, number of Monte Carlo (“bootstrap”) samples.\n\n\n\n\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 6.104544 6.378209 0.2736651 0.04460994\n [2,] 5.827444 6.048127 0.2206824 0.03880130\n [3,] 5.689680 5.899965 0.2102844 0.03362652\n [4,] 5.559639 5.778070 0.2184311 0.03784781\n [5,] 5.453876 5.675437 0.2215615 0.03897071\n [6,] 5.363009 5.585192 0.2221833 0.03973087\n [7,] 5.288334 5.503748 0.2154145 0.04054939\n [8,] 5.224095 5.429034 0.2049390 0.04198644\n [9,] 5.155439 5.358210 0.2027705 0.04421874\n[10,] 5.074827 5.291273 0.2164465 0.04540947\n\n\nAlso note that the hcut() function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nFrom the gap statistic graph above, the recommended number of cluster to retain is 1 or 2. However, it is not logical to retain only one or 2 clusters. Ideally, we should have 3 or more clusters. By examining the gap statistic graph, the 6-cluster gives the next largest gap statistic and should be the next best cluster number to pick.\n\n\n\n\n\n\nIn addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\n\n\n\n\n\n5.7.7 Interpret the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria for their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\n\n# rect is to set the rectangles\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:7)\n\n\n\n\n\n\n5.7.8 Visually-driven hierarchical clustering analysis\nIn this section, we learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n5.7.8.1 Transforming the data frame into a matrix\nThe shan_ict data is currently loaded in a data frame.\nThe code chunk below is used to transform shan_ict data frame into a data matrix to generate the heatmap.\n\nshan_ict_mat <- data.matrix(shan_ict)\n\n\n\n5.7.8.2 Plot interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 5,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\n5.7.9 Map the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename() of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\") +\n  tm_layout(main.title = \"Hierarchical Cluster Map\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#spatially-constrained-clustering---skater-approach",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#spatially-constrained-clustering---skater-approach",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.8 Spatially Constrained Clustering - SKATER approach",
    "text": "5.8 Spatially Constrained Clustering - SKATER approach\nIn this section, we learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n5.8.1 Converting into SpatialPolygonsDataFrame\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp <- as_Spatial(shan_sf)\n\n\n\n5.8.2 Computing Neighbour List\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb <- poly2nb(shan_sp, queen = TRUE)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe plot the neighbors list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nplot(shan_sp, \n     border=grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"blue\", \n     add=TRUE)\ntitle(main=\"Neighbor Network (Queen Contiguity)\")\n\n\n\n\n\n\n\n\n\n\nIf we plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\n\n\n\n5.8.3 Compute Minimum Spanning Tree (MST)\nThe MST is a graph that includes all the nodes in the network, but passes through each only once. So, it reduces the complexity of the original graph to one where each node is connected to only one other node. The resulting tree has n nodes and n-1 edges. The “minimum” part pertains to a cost function that is minimized. The objective is to minimize the overall length (or cost) of the tree. In its simplest form, the cost consists of the distances between the nodes. Here, however, a more general measure of cost is used in the form of the multivariate dissimilarity measure between each pair of nodes. This is based on a multivariate Euclidean distance between the standardized values for the variables, as was the case in the other clustering algorithms.\n\n\n5.8.3.1 Calculate edge costs\nThe first step in the process is to compute the costs associated with each edge in the neighbor list. In other words, for each observation, the dissimilarity is computed between it and each of its neighbors (as defined by the neighbor list). In the spdep package, this is carried out by the nbcosts function. Its arguments are the neighbor list and the standardized data frame.\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between 2 nodes, with reference to the provided attributes (in shan_ict). This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1      S2\nB 55 3025 7626.765 582607.8 5220160\n\n\n\n\n\n5.8.4 Compute the minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below. The only required argument is the weights object. It summarizes the tree by giving each edge as the pair of connected nodes, followed by the cost associated with that edge.\n\nshan.mst <- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 22.944658\n[2,]   25   10 16.395741\n[3,]   10    1 14.402475\n[4,]   10    9 15.704230\n[5,]    9    8  9.082891\n[6,]    8    6 14.001101\n\n\nThe plot method for the MST includes a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbor list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\ntitle(main=\"Minimum Spanning Tree plot\")\n\n\n\n\n\n\n5.8.5 Compute spatially constrained clusters using SKATER method\nThe code chunk below computes the spatially constrained cluster using skater() of spdep package.\n\nclust6 <- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: -\n\nThe first two columns of the MST matrix (i.e. not the cost),\nThe data matrix (to update the costs as units are being grouped), and\nThe number of cuts.\n\nNote: The number of cuts is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 342\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 376\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 146\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 9.5\n  .. ..$ ssw : num 9.5\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 1261\n $ ssw         : num [1:6] 1261 1098 996 954 912 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector that contains the labels of the cluster to which each observation belongs (as before, the label itself is arbitrary). This is followed by a detailed summary for each cluster in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each cut on the overall criterion.\nWe can check the cluster assignment by using the code chunk below.\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the six clusters on top of the townshop area.\n\nplot(shan_sp, border=gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\ntitle(main=\"Minimum Spanning Tree plot \\n using Skater method\", add=TRUE)\n\n\n\n\n\n\n5.8.6 Visualise the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat <- as.matrix(clust6$groups)\n\n# Join back to the sf data table for plotting. One pre-condition for just a combination is that we must not sort the dataframe in the earlier steps\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\n\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\") +\n  tm_layout(main.title = \"Hierarchical Cluster Map \\nusing Skater method\",\n            main.title.position = \"center\",\n            main.title.size = 1.2) \n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Hierarchical Cluster Map \\n \",\n            main.title.position = \"center\",\n            main.title.size = 1.2) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Hierarchical Cluster Map \\nusing Skater method\",\n            main.title.position = \"center\",\n            main.title.size = 1.2) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.9 Spatially Constrained Clustering: ClustGeo Method",
    "text": "5.9 Spatially Constrained Clustering: ClustGeo Method\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\n\nA note on ClustGeo Package\n\n\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\n\n5.9.1 Ward-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section. This only works with the Ward method.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.3 Computing proximity matrix\n\n5.9.1.1 Mapping the clusters formed\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.9 Mapping the clusters formed.\n\ngroups <- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster <- cbind(shan_sf_joined, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"ClustGeo Cluster Map\",\n            main.title.position = \"center\",\n            main.title.size = 1.2) \n\n\n\n\n\n\n\n5.9.2 Spatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n# the 0.1 in the range.alpha argument indicates that the break points should be at 0.1 interval\n# To note that the argument name for number of clusters in in capital K\n# graph = True is to plot the 2 graphs below\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below. This is derived with reference to the Standardised Chart (with y-axis Qnorm). It shows that about 0.6 (or 60%) of the geospatial data is reflected with only a 0.2 (or 20%) reduction in aspatial data.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster objecct.\n\ngroups <- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chun below.\n\nshan_sf_Gcluster <- cbind(shan_sf_joined, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")  + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"ClustGeo Cluster Map \\n(alpha = 0.3)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex3.html#visual-interpretation-of-clusters",
    "href": "Hands-On_Ex/Hands-On_Ex3.html#visual-interpretation-of-clusters",
    "title": "Hands-On Exercise 3/ In-Class Exercise 3",
    "section": "5.10 Visual Interpretation of Clusters",
    "text": "5.10 Visual Interpretation of Clusters\n\n5.10.1 Visualise individual clustering variable\nTHe Code chunk below is used to check the distribution of the variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()+\n  stat_summary(geom = \"point\",\n               fun.y=\"mean\",\n               colour =\"red\",\n               size=2) +\n  ggtitle(\"Distribution of RADIO_PR by Cluser\")\n\n\n\n\nThe boxplot shows that Cluster 3 displays the highest mean (red dot) Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 5 and 6.\n\n\n5.10.2 Multivariate Visualisation\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package.\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\nThe parallel coordinate plot above shows that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. We should explore them and select the one that best meet our analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %>% \n  st_set_geometry(NULL) %>%\n  group_by(CLUSTER) %>%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR mean_COMPUTE…¹\n  <chr>           <dbl>      <dbl>           <dbl>          <dbl>          <dbl>\n1 1               22.1        52.1            4.42           24.6          2.05 \n2 2               23.7        40.2            2.39           13.4          1.15 \n3 3               30.0        61.1            5.22           39.2          2.90 \n4 4               19.6        74.4            9.90           65.1          6.55 \n5 5               12.4        22.4            3.80           13.2          0.668\n6 6                9.86       49.9            7.45           46.8          2.10 \n# … with abbreviated variable name ¹​mean_COMPUTER_PR"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html",
    "href": "Hands-On_Ex/Hands-on_Ex4.html",
    "title": "Hands-On Exercise 4",
    "section": "",
    "text": "Updated on 10-Dec-2022\n(First published on: 9-Dec-2022)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#overview",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#overview",
    "title": "Hands-On Exercise 4",
    "section": "6.1 Overview",
    "text": "6.1 Overview\nGeographically Weighted Regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, we will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#the-data",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#the-data",
    "title": "Hands-On Exercise 4",
    "section": "6.2 The Data",
    "text": "6.2 The Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#getting-started",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#getting-started",
    "title": "Hands-On Exercise 4",
    "section": "6.3 Getting Started",
    "text": "6.3 Getting Started\nBefore we get started, it is important for us to install the necessary R packages and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests - olsrr\nR package for calibrating geographical weighted family of models - GWmodel\nR package for multivariate data visualisation and analysis - corrplot\nSpatial data handling - sf\nAttribute data handling - tidyverse, especially readr, ggplot2 and dplyr\nChoropleth mapping - tmap\n\nThe code chunk below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#a-brief-note-on-gwmodel",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#a-brief-note-on-gwmodel",
    "title": "Hands-On Exercise 4",
    "section": "6.4 A brief note on GWmodel",
    "text": "6.4 A brief note on GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful data exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#geospatial-data-wrangling",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#geospatial-data-wrangling",
    "title": "Hands-On Exercise 4",
    "section": "6.5 Geospatial Data Wrangling",
    "text": "6.5 Geospatial Data Wrangling\n\n6.5.1 Import geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"Hands-On_Ex4/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Cabbie-UK\\ISSS624\\Hands-On_Ex\\Hands-On_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz sf object does not have EPSG information.\n\n\n6.5.2 Update CRS information\nThe code chunk below updates the newly imported mpsz with the appropriate ESPG code (i.e. 3414)\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, we reveal the extent of mpsz_svy21 by using st_bbox() of sf package. The st_bblox() bounds the sf object in a box\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#aspatial-data-wrangling",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#aspatial-data-wrangling",
    "title": "Hands-On Exercise 4",
    "section": "6.6 Aspatial Data Wrangling",
    "text": "6.6 Aspatial Data Wrangling\n\n6.6.1 Import the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"Hands-On_Ex4/data/aspatial/Condo_resale_2015.csv\", show_col_types = FALSE)\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of condo_resale data frame\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n# see the data in XCOORD column\nhead(condo_resale$LONGITUDE)\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\n#see the data in YCOORD column\nhead(condo_resale$LATITUDE) \n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nWe use summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n6.6.2 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nNotice that the output (Geometry Type) is in point feature data frame."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands-On Exercise 4",
    "section": "6.7 Exploratory Data Analysis (EDA)",
    "text": "6.7 Exploratory Data Analysis (EDA)\nIn the section, we learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\n6.7.1 EDA using statistical graphics\nWe plot the distribution of SELLING_PRICE as shown in the code chunk below.\n\noptions(scipen=999)\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") + \n   ggtitle(\"Distribution of SELLING_RPICE\")\n\n\n\n\nThe chart above reveals a right-skewed distribution. This means that more condominium units were transacted at relatively lower prices.\nStatistically, the right-skewed distribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\n# We add a constant +1 to avoid a situation where selling price = 0 \ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE+1))\n\nNow, you can plot the LOG_SELLING_PRICE using the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") + \n   ggtitle(\"Distribution of LOG_SELLING_RPICE\")\n\n\n\n\n\n\n6.7.2 Multiple Histogram Plots distribution of variables\nIn this section,we learn how to draw a small multiple histograms (also known as Trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n6.7.3 Drawing Statistical Point Map\nLastly, we want to review the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\n  tm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-On Exercise 4",
    "section": "6.8 Hedonic Pricing Modelling in R",
    "text": "6.8 Hedonic Pricing Modelling in R\nIn this section, we learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n6.8.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value             Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064            0.0000509 ***\nAREA_SQM      14719.0      428.1  34.381 < 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 0.00000000000000022\n\n\n\nanova(condo.slr)\n\nAnalysis of Variance Table\n\nResponse: SELLING_PRICE\n            Df           Sum Sq          Mean Sq F value                Pr(>F)\nAREA_SQM     1 1050376876745474 1050376876745474    1182 < 0.00000000000000022\nResiduals 1434 1274269843399565     888612164156                              \n             \nAREA_SQM  ***\nResiduals    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1* where x1 is the AREA_SQM\nThe R-squared (aka Coefficient of Determination) of 0.4518 reveals that the simple regression model built is able to explain about 45% of the variation in resale prices.\nY = 𝛼 + 𝛽X\nANOVA of mean:\nThe Analysis of Variance report provides the calculations for comparing the fitted model to a simple mean model. The hypotheses for the F-test are:\nH0: 𝛽1 = 𝛽2 =. . . . = 𝛽𝑘 = 0\nH1: N𝑜𝑡 𝑎𝑙𝑙 𝑒𝑞𝑢𝑎𝑙 𝑡𝑜 0\nwhere k is the number of independent variables.\nIt reveals that the F-ratio is 1182 which is significant at p < 0.0001. This result tells us that there are less than 0.01% chance that an F-ratio this large will happen if the null hypothesis is true. Therefore, we can conclude that our regression model result is significantly better explanatory model of SELLING PRICE than if we used the mean value of re-sale prices. In short, the regression model overall estimates SELLING PRICE significantly well.\nFor the intercept and slope values under the Coefficients section\nH0: α = 0 (intercept)\nH1: α ≠ 0\nH0: β = 0 (slope)\nH1: β ≠ 0\nThe report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the α and β are equal to 0 will be rejected. As a result, we infer that the α and β are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  ggtitle(\"LM plot of Selling Price vs Area\")\n\n\n\n\nThe chart above reveals that there are a few outliers with relatively high selling prices.\n\n\n6.8.2 Multiple Linear Regression Method\n\n6.8.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the independent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, many packages support the display of a correlation matrix. In this section, the corrplot package is used.\nThe code chunk below is used to plot a matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nThings to note:\n\nThe matrix order argument is very important for determining the hidden structure and pattern in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the plotted matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n\n6.8.3 Build a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\n# Fit the regrssion model\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\n\n# Display the results\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value             Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967    0.000076494714281 ***\nAREA_SQM               12708.32     369.59  34.385 < 0.0000000000000002 ***\nAGE                   -24440.82    2763.16  -8.845 < 0.0000000000000002 ***\nPROX_CBD              -78669.78    6768.97 -11.622 < 0.0000000000000002 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212              0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061    0.000051440615323 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072              0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810              0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784              0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429    0.000000066573105 ***\nPROX_PARK             563280.50   66551.68   8.464 < 0.0000000000000002 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762              0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112              0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823    0.000001569612974 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584              0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938    0.000000885077155 ***\nNO_Of_UNITS             -231.18      89.03  -2.597              0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985              0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312    0.000000000000438 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 0.00000000000000022\n\n\n\n\n6.8.4 Prepare Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revise the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate a revised model by using the code chunk below.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\n\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                           ANOVA                                            \n-------------------------------------------------------------------------------------------\n                            Sum of                                                         \n                           Squares          DF            Mean Square       F         Sig. \n-------------------------------------------------------------------------------------------\nRegression    1512585829186630.500          14    108041844941902.172    189.059    0.0000 \nResidual       812060890958408.500        1421       571471422208.591                      \nTotal         2324646720145039.000        1435                                             \n-------------------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n6.8.5 Prepare Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith the gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nThe additional statistics have been added at the bottom of the report.\nFor more customisation options, refer to Tutorial: tbl_regression\n\n6.8.5.1 Checking for multicolinearity\nIn this section, we would use a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables is less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n6.8.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe chart above reveals that most of the data poitns are scattered around the 0 line. Hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n6.8.5.3 Test for Normality Assumption of the residual errors\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) resembles normal distribution.\nFor formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residuals are not normally distributed.\n\n\n6.8.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build uses geographically referenced attributes, hence it is also important for us to visualise the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,      18000000,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\nThe code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\n  tm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nWe switch back to “plot” mode before we continue.\n\ntmap_mode(\"plot\")\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo prove that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nWe use lm.morantest() of spdep package to perform Moran’s I test for residual spatial autocorrelation.\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value <\n0.00000000000000022\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n   0.14388758039   -0.00548759352    0.00003758259 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we reject the null hypothesis that the residuals are randomly distributed.\nSince the observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands-On Exercise 4",
    "section": "6.9 Building Hedonic Pricing Models using GWmodel",
    "text": "6.9 Building Hedonic Pricing Models using GWmodel\nIn this section, we learn how to model hedonic pricing using both the fixed and adaptive bandwidth schemes\n\n6.9.1 Build Fixed Bandwidth GWR Model\n\n6.9.1.1 Compute fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model.\nNotice that the adaptive argument of the function is set to FALSE to indicate that we are interested to compute the fixed bandwidth.\nThere are two possible approaches to determine the stopping rule using the approach argument, they are:\n\nCV cross-validation approach and\nAIC corrected (AICc) approach.\n\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 825911822102784 \nFixed bandwidth: 10917.26 CV score: 797045428603044 \nFixed bandwidth: 6749.419 CV score: 727327288217123 \nFixed bandwidth: 4173.553 CV score: 630000557301613 \nFixed bandwidth: 2581.58 CV score: 540495781061281 \nFixed bandwidth: 1597.687 CV score: 485751468826412 \nFixed bandwidth: 989.6077 CV score: 472243119301430 \nFixed bandwidth: 613.7939 CV score: 13782937640587258 \nFixed bandwidth: 1221.873 CV score: 477871653167391 \nFixed bandwidth: 846.0596 CV score: 479162862134549 \nFixed bandwidth: 1078.325 CV score: 475140559147296 \nFixed bandwidth: 934.7772 CV score: 472517998221988 \nFixed bandwidth: 1023.495 CV score: 473030451602862 \nFixed bandwidth: 968.6643 CV score: 472131662464349 \nFixed bandwidth: 955.7206 CV score: 472207171142149 \nFixed bandwidth: 976.6639 CV score: 472138689617517 \nFixed bandwidth: 963.7202 CV score: 472148360843733 \nFixed bandwidth: 971.7199 CV score: 472129280399246 \nFixed bandwidth: 973.6083 CV score: 472130919502945 \nFixed bandwidth: 970.5527 CV score: 472129460396064 \nFixed bandwidth: 972.4412 CV score: 472129623282981 \nFixed bandwidth: 971.2741 CV score: 472129241640866 \nFixed bandwidth: 970.9985 CV score: 472129284813527 \nFixed bandwidth: 971.4443 CV score: 472129240228113 \nFixed bandwidth: 971.5496 CV score: 472129250323808 \nFixed bandwidth: 971.3793 CV score: 472129239194007 \nFixed bandwidth: 971.3391 CV score: 472129239110127 \nFixed bandwidth: 971.3143 CV score: 472129239714645 \nFixed bandwidth: 971.3545 CV score: 472129239206061 \nFixed bandwidth: 971.3296 CV score: 472129239931915 \nFixed bandwidth: 971.345 CV score: 472129239140163 \nFixed bandwidth: 971.3355 CV score: 472129239682463 \nFixed bandwidth: 971.3413 CV score: 472129239743000 \nFixed bandwidth: 971.3377 CV score: 472129239211951 \nFixed bandwidth: 971.34 CV score: 472129238819453 \nFixed bandwidth: 971.3405 CV score: 472129238593600 \nFixed bandwidth: 971.3408 CV score: 472129238647549 \nFixed bandwidth: 971.3403 CV score: 472129239624159 \nFixed bandwidth: 971.3406 CV score: 472129239431032 \nFixed bandwidth: 971.3404 CV score: 472129239241864 \nFixed bandwidth: 971.3405 CV score: 472129239130278 \nFixed bandwidth: 971.3405 CV score: 472129238832217 \n\n\nThe result shows that the recommended bandwidth is 971.3398 metres.\n\n\n\n\n\n\nQuiz:\n\n\n\n\nDo you know why it is in metres?\nReply: The Projected CRS of SVY21 and transformed equivalent under EPSG:3414 for the URA Master Plan 2014’s planning subzone boundarie sare measured in metres.\n\n\n\n\n\n6.9.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the GWR model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below is used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 22:08:11 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value             Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877    0.000001196976743 ***\n   AREA_SQM               12777.52     367.48  34.771 < 0.0000000000000002 ***\n   AGE                   -24687.74    2754.84  -8.962 < 0.0000000000000002 ***\n   PROX_CBD              -77131.32    5763.12 -13.384 < 0.0000000000000002 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950             0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651    0.000003613932545 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332             0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179    0.000000255705220 ***\n   PROX_PARK             570504.81   65507.03   8.709 < 0.0000000000000002 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654             0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043    0.000000001927962 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074    0.000000441637621 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791             0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120             0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228    0.000000000000798 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 0.00000000000000022 \n   ***Extra Diagnostic information\n   Residual sum of squares: 812060890958409\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                 Min.       1st Qu.        Median       3rd Qu.\n   Intercept            -35988365.488   -519979.772    767797.337   1741234.306\n   AREA_SQM                  1000.279      5275.779      7474.018     12300.971\n   AGE                    -134749.495    -20813.274     -8626.003     -3778.370\n   PROX_CBD             -77047270.137   -236081.916    -83599.576     34645.575\n   PROX_CHILDCARE        -6009730.044   -336665.767    -97425.465    290074.489\n   PROX_ELDERLYCARE      -3500042.494   -159702.666     31970.528    195774.638\n   PROX_URA_GROWTH_AREA  -3016996.080    -82013.243     70749.084    226119.338\n   PROX_MRT              -3528172.076   -658357.468   -188328.987     36922.070\n   PROX_PARK             -1206240.925   -217315.894     35383.116    413347.109\n   PROX_PRIMARY_SCH     -22695027.094   -170660.239     48471.907    515551.477\n   PROX_SHOPPING_MALL    -7258466.404   -166844.608    -10516.913    159227.798\n   PROX_BUS_STOP         -1467612.709    -45206.664    376007.005   1166445.776\n   NO_Of_UNITS              -1317.036      -248.223       -30.846       254.959\n   FAMILY_FRIENDLY       -2274938.102   -111395.125      7621.363    161067.297\n   FREEHOLD              -9206722.091     38073.481    151694.047    375277.911\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 253407016000767 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 22:08:12 \n\n\nThe report shows that the Adjusted R-square of the gwr is 0.8430 which is significantly better than the global multiple linear regression model of 0.6472.\n\n\n\n6.9.2 Build Adaptive Bandwidth GWR Model\nIn this section, we calibrate the gwr-absed hedonic pricing model by using the adaptive bandwidth approach.\n\n6.9.2.1 Compute the adaptive bandwidth\nSimilar to the earlier section, we first use bw.ger() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 795240067952916 \nAdaptive bandwidth: 561 CV score: 766736415369131 \nAdaptive bandwidth: 354 CV score: 695345377846985 \nAdaptive bandwidth: 226 CV score: 615223032444228 \nAdaptive bandwidth: 147 CV score: 567437338972766 \nAdaptive bandwidth: 98 CV score: 542674453374480 \nAdaptive bandwidth: 68 CV score: 516811696101366 \nAdaptive bandwidth: 49 CV score: 485963124854345 \nAdaptive bandwidth: 37 CV score: 464651804391025 \nAdaptive bandwidth: 30 CV score: 442208792500332 \nAdaptive bandwidth: 25 CV score: 443081571798103 \nAdaptive bandwidth: 32 CV score: 450560182354864 \nAdaptive bandwidth: 27 CV score: 446217190611572 \nAdaptive bandwidth: 30 CV score: 442208792500332 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n6.9.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nThe code below can be used to display the model output.\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 22:08:17 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value             Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877    0.000001196976743 ***\n   AREA_SQM               12777.52     367.48  34.771 < 0.0000000000000002 ***\n   AGE                   -24687.74    2754.84  -8.962 < 0.0000000000000002 ***\n   PROX_CBD              -77131.32    5763.12 -13.384 < 0.0000000000000002 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950             0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651    0.000003613932545 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332             0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179    0.000000255705220 ***\n   PROX_PARK             570504.81   65507.03   8.709 < 0.0000000000000002 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654             0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043    0.000000001927962 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074    0.000000441637621 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791             0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120             0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228    0.000000000000798 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 0.00000000000000022 \n   ***Extra Diagnostic information\n   Residual sum of squares: 812060890958409\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                  Min.        1st Qu.         Median\n   Intercept            -134874192.014    -246693.174     779280.345\n   AREA_SQM                   3318.817       5628.499       7782.486\n   AGE                      -96746.436     -29287.820     -14042.717\n   PROX_CBD               -2533033.423    -162556.006     -77241.667\n   PROX_CHILDCARE         -1279036.792    -201752.740       8715.804\n   PROX_ELDERLYCARE       -1621217.923     -92049.948      61029.215\n   PROX_URA_GROWTH_AREA   -7268553.018     -30350.048      45868.678\n   PROX_MRT              -43780537.042    -672818.354    -221150.271\n   PROX_PARK              -2902027.105    -167820.665     116014.299\n   PROX_PRIMARY_SCH        -864176.067    -166266.939      -7785.325\n   PROX_SHOPPING_MALL     -1827150.999    -131754.889     -14049.330\n   PROX_BUS_STOP          -2057895.720     -71460.777     411041.226\n   NO_Of_UNITS               -2199.274       -236.853        -34.699\n   FAMILY_FRIENDLY         -598786.697     -50926.596      26172.549\n   FREEHOLD                -163402.522      40765.437     190227.133\n                               3rd Qu.     Max.\n   Intercept               1619360.306 18758355\n   AREA_SQM                  12737.761    23064\n   AGE                       -5611.856    13303\n   PROX_CBD                   2662.370 11346650\n   PROX_CHILDCARE           377776.875  2892127\n   PROX_ELDERLYCARE         281843.735  2465671\n   PROX_URA_GROWTH_AREA     246125.428  7384059\n   PROX_MRT                 -74593.417  1186242\n   PROX_PARK                465717.595  2588497\n   PROX_PRIMARY_SCH         432218.459  3381462\n   PROX_SHOPPING_MALL       137986.314 38038564\n   PROX_BUS_STOP           1207119.672 12081592\n   NO_Of_UNITS                 116.573     1010\n   FAMILY_FRIENDLY          224806.072  2072414\n   FREEHOLD                 379604.132  1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 252822722477010 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 22:08:18 \n\n\nThe report shows that the Adjusted R-square of the gwr is 0.8561 which, again, is significantly better than the global multiple linear regression model of 0.6472.\n\n\n\n6.9.3 Decoding the GWR Outputs\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing in the regression model.\nPredicted: these are the estimated (or fitted) y values computed by the GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of 0 and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produced by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n6.9.4 Convert SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, we use glimpse() to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\nThe predicted Selling Price for the transaction is summarised as follow:\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n6.9.5 Visualise Local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\n  tm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nWe then turn off interactive view.\n\ntmap_mode(\"plot\")\n\n\n6.9.5.1 Visualise the Local R2 by URA Planning Region\nWe can print the maps with Local R2 values by Planning Region\n\nplanning_region <- c(\"CENTRAL REGION\",\"WEST REGION\",\"EAST REGION\",\"NORTH-EAST REGION\", \"NORTH REGION\")\n\nfor (region in planning_region){\n  print(tm_shape(mpsz_svy21[mpsz_svy21$REGION_N==region, ])+\n    tm_polygons()+\n    tm_shape(condo_resale.sf.adaptive) + \n    tm_bubbles(col = \"Local_R2\",\n             size = 0.15,\n             border.col = \"gray60\",\n             border.lwd = 1) +\n    tm_layout(main.title = paste(\"Local R2 for\", region),\n            main.title.position = \"center\",\n            main.title.size = 1.0)\n  )\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.9.6 Visualise coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\n# Switch to interactive plot\ntmap_mode(\"view\")\n\n# Plot the coefficient estimates\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=1, nrow = 2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSwitch back to view mode\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex4.html#reference",
    "href": "Hands-On_Ex/Hands-on_Ex4.html#reference",
    "title": "Hands-On Exercise 4",
    "section": "6.10 Reference",
    "text": "6.10 Reference\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453\nDr. Kam TIn Seong (2022) , “ISSS602 Data Analytics Lab Lesson 5: The Granddaddy of All Models: Regression Analysis” Version 2.14.0"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html",
    "href": "In-Class_Ex/In-Class_Ex1.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "Updated on 2-Dec-2022\n(First published on 25-Nov-2022)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html#overview",
    "href": "In-Class_Ex/In-Class_Ex1.html#overview",
    "title": "In-Class Exercise 1",
    "section": "3.1 Overview",
    "text": "3.1 Overview\nLearn how to:\n\nCompute spatial weights\nCalculate spatial lagged variables\n\nusing appropriate functions of spdep package.\n(Note: this above was part of an in-class exercise for ISSS624 conducted on 19 Nov 2022)."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html#data-available",
    "href": "In-Class_Ex/In-Class_Ex1.html#data-available",
    "title": "In-Class Exercise 1",
    "section": "3.2 Data available",
    "text": "3.2 Data available\nTwo datasets are used in this exercise. They are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html#getting-started",
    "href": "In-Class_Ex/In-Class_Ex1.html#getting-started",
    "title": "In-Class Exercise 1",
    "section": "3.3 Getting Started",
    "text": "3.3 Getting Started\nThe code chunks below will install and load the 5 packages needed for this exericse.\n\npacman::p_load(sf, tidyverse, spdep, tmap, knitr) \n# pacman is a wrapper for installation and loading of libraries"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html#import-data-into-r-for-analysis",
    "href": "In-Class_Ex/In-Class_Ex1.html#import-data-into-r-for-analysis",
    "title": "In-Class Exercise 1",
    "section": "3.4 Import data into R for analysis",
    "text": "3.4 Import data into R for analysis\n\n3.4.1 Import shapefile whch contains Hunan county boundary layer\nThe code chunk below will import ESRI shapefile into R\n\nhunan = st_read(dsn = \"In-Class_Ex1/data/geospatial\", \n                  layer = \"hunan\") # The dsn path is with reference to the .qmd document created to house this page\n\nReading layer `hunan' from data source \n  `C:\\Cabbie-UK\\ISSS624\\In-Class_Ex\\In-Class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.4.2 Import attribute data from csv file\nWe import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class\n\nhunan2012 = read_csv(\"In-Class_Ex1/data/aspatial/Hunan_2012.csv\", show_col_types = FALSE) \n\nInspect the first rows of hunan2012\n\nhead(hunan2012)\n\n# A tibble: 6 × 29\n  County   City  avg_w…¹ depos…²   FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO  Loan\n  <chr>    <chr>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl> <dbl>\n1 Anhua    Yiya…   30544  10967  6832.    457.   2703  13225  14567  9277. 3955.\n2 Anren    Chen…   28058   4599. 6386.    221.   1455.  4941. 12761  4189. 2555.\n3 Anxiang  Chan…   31935   5517. 3541     244.   1780. 12482  23667  5109. 2807.\n4 Baojing  Huna…   30843   2250  1005.    193.   1379.  4088. 14563  3624. 1254.\n5 Chaling  Zhuz…   31251   8241. 6508.    620.   1947  11585  20078  9158. 4287.\n6 Changni… Heng…   28518  10860  7920     770.   2632. 19886  24418 37392  4243.\n# … with 18 more variables: NIPCR <dbl>, Bed <dbl>, Emp <dbl>, EmpR <dbl>,\n#   EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>, and\n#   abbreviated variable names ¹​avg_wage, ²​deposite\n\n\n\n\n3.4.3 Perform relational join\nTo combine the information in the shapefile and the attribute data, we perform a left_join (from dplyr package) using the county name that is available under NAME_3 column of the Hunan shapefile and the County column n the Hunan attribute file\n\nhunan = left_join(hunan,hunan2012,\n                  by =c(\"NAME_3\"=\"County\"))\n\n\n\n3.4.4 Visualise Regional Development Indicator\nWe prepare a basemap and a choropleth map showing the distribution of GDP per capita (GDPPC) 2012 by using qtm() of tmap package\n\nbasemap = tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.35) +\n  tm_layout(main.title = \"Basemap of Hunan province, China\",\n          main.title.position = \"center\",\n          main.title.size = 1.2)\n\ngdppc =qtm(hunan, fill = \"GDPPC\",\n          legend.height = 0.25, \n          legend.width = 0.35,\n          legend.outside = FALSE,\n          legend.position = c(\"right\", \"bottom\")\n          ) +\n          tm_layout(main.title = \"Distribution of GDPPC, 2012\",\n          main.title.position = \"center\",\n          main.title.size = 1.2)\n\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html#compute-contiguity-spatial-weights",
    "href": "In-Class_Ex/In-Class_Ex1.html#compute-contiguity-spatial-weights",
    "title": "In-Class Exercise 1",
    "section": "3.5 Compute Contiguity Spatial Weights",
    "text": "3.5 Compute Contiguity Spatial Weights\nWe will use poly2nb() of spdep package to compute contiguity weight matrices. The function builds a neighbours list based on regions with contiguous boundaries, that is sharing one or more boundary point. The function uses the Queen criteria by default (see section 3.5.3 to use the Rook criteria).\n\n3.5.1 Compute contiguity based neighbors using Queen method\nTHe Queen method identifies neighbors that surround the area of study. In the diagram below, the blue cell i, is surrounded by 8 neighbors\n\n\n\n\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan.\nThere are two area units - regions 30 and 65 - with only one neighbor.\nThe most connected area unit - region 85 - has 11 neighbors.\n\n3.5.1.1 List all neighboring polygons\nFor example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\n\n\n3.5.1.2 Retrieve the county name of Polygon ID=1\nWe can use the following code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\n\n\n3.5.1.3 Review the county names of neighboring ploygons\nWe can use the following code chunk:\n\nhunan$NAME_3[wm_q[[1]]]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nor\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\n\n3.5.1.4 Retrieve the GDPPC of the neighboring counties\nWe can use the code chunk below.\n\nnb1 = wm_q[[1]]\nnb1 = hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\n3.5.1.5 Display the weight matrix of all the 88 counties by using the str() method\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\n3.5.2 Compute contiguity based neighbors using Rook method\nThe Rook method identifies adjacent neighbors. In the diagram below, the blue cell i has 4 neighbors, much like how a Rook moves about on a chess board.\n\n\n\n\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. Similar to the Queen’s method, the most connected area unit - Region 85 - has 10 neighbors. Two area units - Regions 30 and 65 - only have 1 neighbor.\n\n\n3.5.3 Visualise contiguity weights using a Connectivity Graph\nA connectivity graph takes a point and displays a line to each neighboring point. For polygons, we will typically use the polygon centroids as the connecting points.\n\n3.5.3.1 Prepare the latitude and longitude of the Polygon Centroids om a separate data frame\nTo do so, we will use a mapping function to apply the st_centroid method on the geometry column of each area unit/county.\nTo get the longitude values, we map the st_centroid function over the geometry column of hunan and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nTo get the latitude, we access the second value in each centroid.\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nWe then combine the longitude and latitude values into a data frame object\n\ncoords = cbind(longitude,latitude)\n\nWe check the first few observations to see if the values are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n3.5.3.2 Plot Connectivity Map with Queen contiguity\n\n# Plot the base layer\nplot(hunan$geometry, border=\"lightgrey\") \n# Add on the connectivity layer\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\ntitle(main=\"Queen Contiguity\")\n\n\n\n# pch refers to the point symbol (dot)\n# cex refers to the point size\n\n\n\n3.5.3.3 Plot Connectivity Map using Rook contiguity\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\")\ntitle(main=\"Rook Contiguity\")\n\n\n\n\n\n\n3.5.3.4 Plot Connectivity Map using Queen and Rook contiguity\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\ntitle(main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\")\ntitle(main=\"Rook Contiguity\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html#compute-distance-based-neighbors",
    "href": "In-Class_Ex/In-Class_Ex1.html#compute-distance-based-neighbors",
    "title": "In-Class Exercise 1",
    "section": "3.6 Compute distance based neighbors",
    "text": "3.6 Compute distance based neighbors\nWe will use the dnearneigh() of spdep package to derive distance-based weight matrices . The function identifies neighbours of region points by Euclidean distance with a distance band with lower distance bound (d1), and upper distance bound (d2).\n\n3.6.1 Determine the cut-off distance\nWe need to determine the upper limit for distance band by using the steps below so that all area units will have at least 1 neighbor:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep. By default k=1 and we can set this argument value explicitly.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns the Euclidean distances along the links in a list of the same form as the neighbors list.\nRemove the list structure of the returned object by using unlist().\n\n\n# Covers the first 2 points above to prepare a list of nearest neighbor for each area unit\nk1 = knn2nb(knearneigh(coords,k=1))\n\n# Covers the 3rd and 4th point above to return a vector of distances between the area unit and its nearest neighbor\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\n\n#Summarise the results\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbor distance is 61.79 km. This will be used as the upper threshold to provide certainty that all units will have at least one neighbor.\n\n\n3.6.2 Compute fixed distance weight matrix\n\n3.6.2.1 Compute the distance weight matrix by using dnearneigh()\n\nwm_d62 = dnearneigh(coords, 0, 62, longlat = TRUE) # longlat = TRUE if point coordinates are geographical longitude-latitude decimal degrees, in which case distances are measured in kilometers\n\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\n\n\n\n\n\nWhat is the meaning of “Average number of links: 3.681818” shown above?\n\nThis means that based on the above, within a distance of 62 km for each area unit, the average number of connections or neighbors that the area units has is 3.7.\n\n\n\n\n\n3.6.2.2 Display the content of wm_d62 weight matrix using str()\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n3.6.2.3 Alternative way to display the structure of the weight matrix by using table() and card() of spdep\nThe function card(nb) is used to extract the number of neighbors from a “nb” object. The table function tabulates the count results\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\n# n.comp.nb() finds the number of disjoint connected subgraphs in the graph depicted by a spatial neighbours list object (or nb.obj)\nn_comp <- n.comp.nb(wm_d62)\n\n# nc column shows the number of disjoint connected subgraphs\nn_comp$nc\n\n[1] 1\n\n\n\n# comp.id contains a vector with the indices of the disjoint connected subgraphs that the nodes in nb.obj belong to\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\n3.6.2.4 Plot fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\ntitle(main = \"Fixed Distance Weight Matrix Plot\")\n\n\n\n\nNote: The red links show that nearest neighbor for each area unit, while the black links show the additional neighbors if we set a distance buffer (or cut-off) of 62km.\nAlternatively, we can plot the 2 sets of links separately with the nearest neighbor being a subset of the distance linked areas.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\ntitle(main = \"1st nearest neighbours\")\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\ntitle(main = \"Distance-linked neighbours \\n (within 62km)\")\n\n\n\n\n\n\n\n3.6.3 Compute adaptive distance weight matrix\nTo control the numbers of neighbors directly using k-nearest neighbors, we can tweak the k argument in the knearneigh() function.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str() and note that each county has exactly 6 neighbors.\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n3.6.3.1 Plot distance-based neighbors\nWe can run the following codes\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\ntitle(main = \"Disance-based Neighbours \\n (with k = 6)\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html#weights-based-on-inversed-distance-method",
    "href": "In-Class_Ex/In-Class_Ex1.html#weights-based-on-inversed-distance-method",
    "title": "In-Class Exercise 1",
    "section": "3.7 Weights based on Inversed Distance method",
    "text": "3.7 Weights based on Inversed Distance method\nFirst, we compute the distances between areas (defined by Queen contiguity discussed in section 3.5.3.2) using nbdists() of spdep.\n\n# Compute the inverse of distances between a county and its neighbors\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\n\n# Display first 6 rows of ids\nhead(ids)\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n\n\n3.7.1 Row-standard weight matrix (rswm)\nNext, we need to assign weights to each neighboring polygon using the nb2listw() function. In our case, each neighboring polygon is assigned equal weight (style=“W”) for simplicity’s sake. This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. Note that other more robust options are available, notably style=“B”.\n\n#zero.policy=TRUE option allows for lists of neighbors with zero values (as opposed to NA). This should be used with caution since the user may not be aware of missing neighbors in the dataset\n# Coding style = \"W\" means row standardisation is used\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\nRecall that in Section 3.5.1.1 , Polygon 1 has 5 neighbors\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nTo see the weights of the 5 neighbors:\n\nrswm_q$weights[[1]]\n\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix (based on Inversed Distance) by using the code chunk below.\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nTo see the distance weights of the 5 neighbors for Polygon 1:\n\nrswm_ids$weights[[1]]\n\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\nSummary of the distance weights\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "In-Class_Ex/In-Class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-Class Exercise 1",
    "section": "3.8 Application of Spatial Weight Matrix",
    "text": "3.8 Application of Spatial Weight Matrix\nThe lag.listw() function (from spdep package) uses a “listw” sparse representation of a spatial weights matrix to compute the lag vector Vx. A listw object is typically created by nb2listw() function.\n\n3.8.1 Spatial lag with row-standardized weights\nWe compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\n# Convert 2 separate lists into a list of lists\nlag.list = list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\n# Convert lag.list to a dataframe lag.res\nlag.res = as.data.frame(lag.list)\n# Rename the 2 columns in lag.res table\ncolnames(lag.res) = c(\"NAME_3\", \"lag GDPPC\")\n# Join lag.res wtih hunan\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for the first 6 counties\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc =  qtm(hunan, \"GDPPC\") +\n          tm_layout(main.title = \"Distribution of GDPPC, 2012 \\n   \",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          legend.height = 0.26, \n          legend.width = 0.40)\n\n\nlag_gdppc = qtm(hunan, \"lag GDPPC\") +\n            tm_layout(main.title = \"Distribution of Lag GDPPC, 2012 \\n (Row Standardised)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.26, \n            legend.width = 0.40)\n\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n3.8.2 Spatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we use lag.listw() to compute a lag variable from our weight and GDPPC.\n\nlag_sum = list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res = as.data.frame(lag_sum)\ncolnames(lag.res) = c(\"NAME_3\", \"lag_sum GDPPC\")\n\nWe examine the results by using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nWe append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nFinally, we plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc =   qtm(hunan, \"GDPPC\")+\n          tm_layout(main.title = \"Distribution of GDPPC, 2012 \\n   \",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          legend.height = 0.26, \n          legend.width = 0.40)\n\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\") + \n            tm_layout(main.title = \"Distn of Lag_Sum GDPPC, 2012\\n(sum of neighboring values)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.26, \n            legend.width = 0.40)  \n          \ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n3.8.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element (the data points for the county itself) before assigning weights.\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs <- include.self(wm_q)\n\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs <- nb2listw(wm_qs)\n\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res <- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\n\n\n\n\n\nThe third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\n\n\n\n\n\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, lag_wm_qs.res)\n\nJoining, by = \"NAME_3\"\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %>%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, we use qtm() of tmap package is used to plot the lag_GDPPC and w_ave_gdppc map next to each other for quick comparison.\n\n# lag_gdppc map is defined in section 3.8.1 above\n\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\") + \n  tm_layout(main.title = \"Distribution of Spatial Window \\nAverage GDPPC, 2012\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.26, \n            legend.width = 0.40)\n\n\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nFor more effective comparison, it is advisible to use the core tmap mapping functions.\n\n\n\n\n\n\n\n\n3.8.4 Spatial window sum\nThe spatial window sum is the counterpart of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs <- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbor structure that includes the diagonal element.\n\nb_weights <- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values\n\nb_weights2 <- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\n\n\n\n\n\nThe second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\n\n\n\n\n\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %>%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\n# lag_sum_gdppc map is defined in section 3.8.2 above\n\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")+ \n  tm_layout(main.title = \"Distribution of Spatial Window \\nSum GDPPC, 2012\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.26, \n            legend.width = 0.40)\n\n\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html",
    "href": "In-Class_Ex/In-Class_Ex2.html",
    "title": "In-Class Exercise 2",
    "section": "",
    "text": "Published on: 27-Nov-2022\n(First published on: 26-Nov-2022)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#overview",
    "href": "In-Class_Ex/In-Class_Ex2.html#overview",
    "title": "In-Class Exercise 2",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nTo prepare for the Take-home Exercise 1, which examines the spatial patterns of functional and non-functional water points (wp) in Nigeria\nLearn how to:\n\nImport raw Geospatial Data downloaded from the Internet\nPerform data wrangling for spatial pattern analysis"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#import-and-load-the-appropriate-packages-into-r-environment",
    "href": "In-Class_Ex/In-Class_Ex2.html#import-and-load-the-appropriate-packages-into-r-environment",
    "title": "In-Class Exercise 2",
    "section": "1.2 Import and load the appropriate packages into R environment",
    "text": "1.2 Import and load the appropriate packages into R environment\n\n# funModelling will be used for rapid Exploratory Data Analysis\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#import-the-geospatial-data",
    "href": "In-Class_Ex/In-Class_Ex2.html#import-the-geospatial-data",
    "title": "In-Class Exercise 2",
    "section": "1.3 Import the Geospatial Data",
    "text": "1.3 Import the Geospatial Data\n2 geospatial data sets are used for this exericse:\n\ngeo_export: This contains information on the water points in Nigeria\nnga_lga2: This contains Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data\n\n\n1.3.1 Import water point geospatial data\n\nwp = st_read(dsn = \"In-Class_Ex2/geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwrite_rds(wp, \"In-Class_Ex2/geodata/wp_nga.rds\")\n\n\n\n1.3.2 Import Nigeria LGA boundary data\n\nnga = st_read(dsn = \"In-Class_Ex2/geodata\",\n               layer = \"nga_lga2\",\n               crs = 4326)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#data-wrangling",
    "href": "In-Class_Ex/In-Class_Ex2.html#data-wrangling",
    "title": "In-Class Exercise 2",
    "section": "2.1 Data Wrangling",
    "text": "2.1 Data Wrangling\n\n2.1.1 Recode NA values into string\nFirst, we do a count of the values in the status_cle column in the imported wp dataset\n\nwp_nga = read_rds(\"In-Class_Ex2/geodata/wp_nga.rds\")\n\nfreq(data=wp_nga,input = 'status_cle')\n\nWe use the replace_na() method to recode all the NA values in status_cle field into Unknown\n\nwp_nga = wp_nga %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#extract-functional-water-points",
    "href": "In-Class_Ex/In-Class_Ex2.html#extract-functional-water-points",
    "title": "In-Class Exercise 2",
    "section": "2.2 Extract functional water points",
    "text": "2.2 Extract functional water points\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional = wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#extract-non-functional-water-points",
    "href": "In-Class_Ex/In-Class_Ex2.html#extract-non-functional-water-points",
    "title": "In-Class Exercise 2",
    "section": "2.3 Extract non-functional water points",
    "text": "2.3 Extract non-functional water points\n\nwpt_nonfunctional = wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#extract-water-points-with-unknown-value",
    "href": "In-Class_Ex/In-Class_Ex2.html#extract-water-points-with-unknown-value",
    "title": "In-Class Exercise 2",
    "section": "2.4 Extract water points with Unknown value",
    "text": "2.4 Extract water points with Unknown value\n\nwpt_unknown = wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#perform-point-in-polygon-count",
    "href": "In-Class_Ex/In-Class_Ex2.html#perform-point-in-polygon-count",
    "title": "In-Class Exercise 2",
    "section": "2.5 Perform Point-in-Polygon Count",
    "text": "2.5 Perform Point-in-Polygon Count\nWe use st_intersects to compute the number of functional, non-functional and unknown wps in each LGA.\n\nnga_wp = nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#save-the-data-table-for-spatial-analysis",
    "href": "In-Class_Ex/In-Class_Ex2.html#save-the-data-table-for-spatial-analysis",
    "title": "In-Class Exercise 2",
    "section": "2.6 Save the data table for spatial analysis",
    "text": "2.6 Save the data table for spatial analysis\nWe derive two fields namely pct_functional and pct_non-functional using the mutate() of dplyr package. To keep the file size small, we use select() of dplyr is used to retain only columns 3,4,9,10, 18,19,20,21,22,and 23.\n\nnga_wp = nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nThereafter ,we save the tidied sf data table into rds format for our spatial analysis\n\nwrite_rds(nga_wp, \"In-Class_Ex2/geodata/nga_wp.rds\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex2.html#visualise-the-spatial-dsitribution-of-water-points",
    "href": "In-Class_Ex/In-Class_Ex2.html#visualise-the-spatial-dsitribution-of-water-points",
    "title": "In-Class Exercise 2",
    "section": "2.7 Visualise the spatial dsitribution of water points",
    "text": "2.7 Visualise the spatial dsitribution of water points\n\n# Load the nga_wp sf data file prepare in the previous steps\nnga_wp <- read_rds(\"In-Class_Ex2/geodata/nga_wp.rds\")\n\n# Plot the various types of water points\ntotal = qtm(nga_wp, \"total wpt\") + \n        tm_layout(main.title = \"Total no. of \\nwater points\",\n                  main.title.position = \"center\",\n                  main.title.size = 1.0,\n                  legend.height = 0.26,\n                  legend.width = 0.40) \n\nwp_functional = qtm(nga_wp, \"wpt functional\") + \n                tm_layout(main.title = \"Total no. of functional \\nwater points\",\n                  main.title.position = \"center\",\n                  main.title.size = 1.0,\n                  legend.height = 0.26,\n                  legend.width = 0.40) \n\nwp_nonfunctional = qtm(nga_wp, \"wpt non-functional\") + \n                tm_layout(main.title = \"Total no. of non-functional \\nwater points\",\n                  main.title.position = \"center\",\n                  main.title.size = 1.0,\n                  legend.height = 0.26,\n                  legend.width = 0.40)\n\nunknown <- qtm(nga_wp, \"wpt unknown\") + \n                tm_layout(main.title = \"Total no. of  water points \\nwith unknown status\",\n                  main.title.position = \"center\",\n                  main.title.size = 1.0,\n                  legend.height = 0.26,\n                  legend.width = 0.40)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, ncol=2)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html",
    "href": "In-Class_Ex/In-Class_Ex4.html",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "First published on: 10-Dec-2022"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#overview",
    "href": "In-Class_Ex/In-Class_Ex4.html#overview",
    "title": "In-Class Exercise 4",
    "section": "6.1 Overview",
    "text": "6.1 Overview\nGeographically Weighted Regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, we will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#the-data",
    "href": "In-Class_Ex/In-Class_Ex4.html#the-data",
    "title": "In-Class Exercise 4",
    "section": "6.2 The Data",
    "text": "6.2 The Data\nTwo data sets are used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#getting-started",
    "href": "In-Class_Ex/In-Class_Ex4.html#getting-started",
    "title": "In-Class Exercise 4",
    "section": "6.3 Getting Started",
    "text": "6.3 Getting Started\nBefore we get started, it is important for us to install the necessary R packages and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests - olsrr\nR package for calibrating geographical weighted family of models - GWmodel\nR package for multivariate data visualisation and analysis - corrplot\nSpatial data handling - sf\nAttribute data handling - tidyverse, especially readr, ggplot2 and dplyr\nChoropleth mapping - tmap\n\nThe code chunk below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#a-brief-note-on-gwmodel",
    "href": "In-Class_Ex/In-Class_Ex4.html#a-brief-note-on-gwmodel",
    "title": "In-Class Exercise 4",
    "section": "6.4 A brief note on GWmodel",
    "text": "6.4 A brief note on GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW Principal Components Analysis, GW Discriminant Analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful data exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#geospatial-data-wrangling",
    "href": "In-Class_Ex/In-Class_Ex4.html#geospatial-data-wrangling",
    "title": "In-Class Exercise 4",
    "section": "6.5 Geospatial Data Wrangling",
    "text": "6.5 Geospatial Data Wrangling\n\n6.5.1 Import geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in SVY21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"In-Class_Ex4/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Cabbie-UK\\ISSS624\\In-Class_Ex\\In-Class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz sf object does not have EPSG information.\n\n\n6.5.2 Update CRS information\nThe code chunk below updates the newly imported mpsz with the appropriate ESPG code (i.e. 3414), which is slightly different from the SVY21 coordinate system.\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\n\n\n\n\n\n\nWe could have transformed the coordinates while reading in the MP14_SUBZONE_WEB_PL file into R in the previous section by adding the CRS argument.\n\n\n\n\n\n\nAfter transforming the projection metadata, we can verify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, we reveal the extent of mpsz_svy21 by using st_bbox() of sf package. The st_bblox() bounds the sf object in a box\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#aspatial-data-wrangling",
    "href": "In-Class_Ex/In-Class_Ex4.html#aspatial-data-wrangling",
    "title": "In-Class Exercise 4",
    "section": "6.6 Aspatial Data Wrangling",
    "text": "6.6 Aspatial Data Wrangling\n\n6.6.1 Import the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"In-Class_Ex4/data/aspatial/Condo_resale_2015.csv\", show_col_types = FALSE)\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of condo_resale data frame\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n# see the data in XCOORD column\nhead(condo_resale$LONGITUDE)\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\n#see the data in YCOORD column\nhead(condo_resale$LATITUDE) \n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nWe use summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n6.6.2 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to SVY1 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nNotice that the output (Geometry Type) is a point feature data frame."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#exploratory-data-analysis-eda",
    "href": "In-Class_Ex/In-Class_Ex4.html#exploratory-data-analysis-eda",
    "title": "In-Class Exercise 4",
    "section": "6.7 Exploratory Data Analysis (EDA)",
    "text": "6.7 Exploratory Data Analysis (EDA)\nIn the section, we learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\n6.7.1 EDA using statistical graphics\nWe plot the distribution of SELLING_PRICE as shown in the code chunk below.\n\noptions(scipen=999)\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") + \n   ggtitle(\"Distribution of SELLING_RPICE\")\n\n\n\n\nThe chart above reveals a right-skewed distribution. This means that more condominium units were transacted at relatively lower prices.\nStatistically, the right-skewed distribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\n# We add a constant +1 to avoid a situation where selling price = 0 and taking log(0) will result in -Inf\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE+1))\n\nNow, we plot the LOG_SELLING_PRICE using the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") + \n   ggtitle(\"Distribution of LOG_SELLING_RPICE\")\n\n\n\n\n\n\n6.7.2 Multiple Histogram Plots distribution of variables\nIn this section,we learn how to draw a small multiple histograms (also known as Trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n6.7.3 Drawing Statistical Point Map\nLastly, we want to review the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE)+\n  tm_polygons() +\n  tm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf we see the “Error: Shape contains Invalid polygons. Please fix it or set tmap_options(check.and fix=True) and rerun the plot” message, we can insert suggested code line in the script (before the tm_polygon line is run).\nIn this case, the issue is due to 2 broken polygons in the base map (i.e. data issue).\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "In-Class_Ex/In-Class_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "In-Class Exercise 4",
    "section": "6.8 Hedonic Pricing Modelling in R",
    "text": "6.8 Hedonic Pricing Modelling in R\nIn this section, we learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n6.8.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value             Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064            0.0000509 ***\nAREA_SQM      14719.0      428.1  34.381 < 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 0.00000000000000022\n\n\n\nanova(condo.slr)\n\nAnalysis of Variance Table\n\nResponse: SELLING_PRICE\n            Df           Sum Sq          Mean Sq F value                Pr(>F)\nAREA_SQM     1 1050376876745474 1050376876745474    1182 < 0.00000000000000022\nResiduals 1434 1274269843399565     888612164156                              \n             \nAREA_SQM  ***\nResiduals    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1* where x1 is the AREA_SQM\nThe R-squared (aka Coefficient of Determination) of 0.4518 reveals that the simple regression model built is able to explain about 45% of the variation in selling prices.\nY = 𝛼 + 𝛽X\nANOVA of mean:\nThe Analysis of Variance report provides the calculations for comparing the fitted model to a simple mean model. The hypotheses for the F-test are:\nH0: 𝛽1 = 𝛽2 =. . . . = 𝛽𝑘 = 0\nH1: N𝑜𝑡 𝑎𝑙𝑙 𝑒𝑞𝑢𝑎𝑙 𝑡𝑜 0\nwhere k is the number of independent variables.\nIt reveals that the F-ratio is 1182 which is significant at p < 0.0001. This result tells us that there are less than 0.01% chance that an F-ratio this large will happen if the null hypothesis is true. Therefore, we can conclude that our regression model result is significantly better explanatory model of SELLING PRICE than if we used the mean value of selling prices. In short, the regression model overall estimates SELLING PRICE significantly well.\nFor the intercept and slope values under the Coefficients section\ni. intercept\nH0: α = 0\nH1: α ≠ 0\nii. slope\nH0: β = 0\nH1: β ≠ 0\nThe report reveals that the p-values of both the estimates of the Intercept and AREA_SQM are smaller than 0.001. In view of this, the null hypothesis of the α and β are equal to 0 will be rejected. As a result, we infer that the α and β are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  ggtitle(\"LM plot of Selling Price vs Area\")\n\n\n\n\nThe chart above reveals that there are a few outliers with relatively high selling prices.\n\n\n6.8.2 Multiple Linear Regression Method\n\n6.8.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the independent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, many packages support the display of a correlation matrix. In this section, the corrplot package is used.\nThe code chunk below is used to plot a matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\n\n\n\n\n\nWe have to pass in a non-sf data frame in order to create the correlation matrix plot above\n\n\n\n\n\n\nThings to note:\n\nThe matrix order argument is very important for determining the hidden structure and pattern in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the plotted matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n\n6.8.3 Build a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\n# Fit the regrssion model\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\n\n# Display the results\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value             Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967    0.000076494714281 ***\nAREA_SQM               12708.32     369.59  34.385 < 0.0000000000000002 ***\nAGE                   -24440.82    2763.16  -8.845 < 0.0000000000000002 ***\nPROX_CBD              -78669.78    6768.97 -11.622 < 0.0000000000000002 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212              0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061    0.000051440615323 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072              0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810              0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784              0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429    0.000000066573105 ***\nPROX_PARK             563280.50   66551.68   8.464 < 0.0000000000000002 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762              0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112              0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823    0.000001569612974 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584              0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938    0.000000885077155 ***\nNO_Of_UNITS             -231.18      89.03  -2.597              0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985              0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312    0.000000000000438 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 0.00000000000000022\n\n\n\n\n6.8.4 Prepare Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revise the model by removing those variables which are not statistically significant.\n\n\n\n\n\n\nAlternatively, we can conduct a stepwsie regression to identity the more significant independent variables.\n\n\n\n\n\n\nNow, we are ready to calibrate a revised model by using the code chunk below.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\n\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                           ANOVA                                            \n-------------------------------------------------------------------------------------------\n                            Sum of                                                         \n                           Squares          DF            Mean Square       F         Sig. \n-------------------------------------------------------------------------------------------\nRegression    1512585829186630.500          14    108041844941902.172    189.059    0.0000 \nResidual       812060890958408.500        1421       571471422208.591                      \nTotal         2324646720145039.000        1435                                             \n-------------------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nThings to note from the report above:\n\nUnder Model Summary: We look at the Adjusted R-square and model explains 0.65 of the variation in selling price\nUnder ANOVA: We look at the Sig and the corresponding p-value (=0.000) which means the model is significant\nUnder Parameter Estimates: We look at the Beta values and their Sig (or p-value). To be mindful of the sign (+|-) of the Beta estimates as it reflects the direction of the relationship between the independent and dependent variables.\n\n\n\n6.8.5 Prepare Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith the gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nThe additional statistics have been added at the bottom of the report.\nFor more customisation options, refer to Tutorial: tbl_regression\n\n6.8.5.1 Checking for multicolinearity\nIn this section, we would use a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\n\n\n\n\n\nWe conduct this 2nd round of multicollinearity after fitting the lm model using the VIF measure.\n\n\n\n\n\n\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nVIF determines the strength of the correlation between the independent variables. It is predicted by taking a variable and regressing it against every other variable. R-squared value is determined to find out how well an independent variable is described by the other independent variables. A high value of R-squared means that the variable is highly correlated with the other variables.\n\nVIF starts at 1 and has no upper limit\nVIF = 1, no correlation between the independent variable and the other variables\nVIF exceeding 5 or 10 indicates high multicollinearity between this independent variable and the others\n\nSince the VIF of the independent variables is less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n6.8.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe chart above reveals that most of the data poitns are scattered around the 0 line. Hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n6.8.5.3 Test for Normality Assumption of the residual errors\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) resembles normal distribution.\nFor formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residuals are not normally distributed.\n\n\n6.8.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build uses geographically referenced attributes, hence it is also important for us to visualise the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object and rename the newly joined column.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\n                  rename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,      18000000,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\nThe code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\n  tm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nWe switch back to “plot” mode before we continue.\n\ntmap_mode(\"plot\")\n\nThe figure above reveals that there is sign of spatial autocorrelation.\nTo prove that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nWe use lm.morantest() of spdep package to perform Moran’s I test for residual spatial autocorrelation.\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value <\n0.00000000000000022\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n   0.14388758039   -0.00548759352    0.00003758259 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we reject the null hypothesis that the residuals are randomly distributed.\nSince the observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "In-Class_Ex/In-Class_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "In-Class Exercise 4",
    "section": "6.9 Building Hedonic Pricing Models using GWmodel",
    "text": "6.9 Building Hedonic Pricing Models using GWmodel\nIn this section, we learn how to model hedonic pricing using both the fixed and adaptive bandwidth schemes\n\n6.9.1 Build Fixed Bandwidth GWR Model\n\n6.9.1.1 Compute fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model.\nNotice that the adaptive argument of the function is set to FALSE to indicate that we are interested to compute the fixed bandwidth.\nThere are two possible approaches to determine the stopping rule using the approach argument, they are:\n\nCV cross-validation approach and\nAIC corrected (AICc) approach.\n\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 825911822102784 \nFixed bandwidth: 10917.26 CV score: 797045428603044 \nFixed bandwidth: 6749.419 CV score: 727327288217123 \nFixed bandwidth: 4173.553 CV score: 630000557301613 \nFixed bandwidth: 2581.58 CV score: 540495781061281 \nFixed bandwidth: 1597.687 CV score: 485751468826412 \nFixed bandwidth: 989.6077 CV score: 472243119301430 \nFixed bandwidth: 613.7939 CV score: 13782937640587258 \nFixed bandwidth: 1221.873 CV score: 477871653167391 \nFixed bandwidth: 846.0596 CV score: 479162862134549 \nFixed bandwidth: 1078.325 CV score: 475140559147296 \nFixed bandwidth: 934.7772 CV score: 472517998221988 \nFixed bandwidth: 1023.495 CV score: 473030451602862 \nFixed bandwidth: 968.6643 CV score: 472131662464349 \nFixed bandwidth: 955.7206 CV score: 472207171142149 \nFixed bandwidth: 976.6639 CV score: 472138689617517 \nFixed bandwidth: 963.7202 CV score: 472148360843733 \nFixed bandwidth: 971.7199 CV score: 472129280399246 \nFixed bandwidth: 973.6083 CV score: 472130919502945 \nFixed bandwidth: 970.5527 CV score: 472129460396064 \nFixed bandwidth: 972.4412 CV score: 472129623282981 \nFixed bandwidth: 971.2741 CV score: 472129241640866 \nFixed bandwidth: 970.9985 CV score: 472129284813527 \nFixed bandwidth: 971.4443 CV score: 472129240228113 \nFixed bandwidth: 971.5496 CV score: 472129250323808 \nFixed bandwidth: 971.3793 CV score: 472129239194007 \nFixed bandwidth: 971.3391 CV score: 472129239110127 \nFixed bandwidth: 971.3143 CV score: 472129239714645 \nFixed bandwidth: 971.3545 CV score: 472129239206061 \nFixed bandwidth: 971.3296 CV score: 472129239931915 \nFixed bandwidth: 971.345 CV score: 472129239140163 \nFixed bandwidth: 971.3355 CV score: 472129239682463 \nFixed bandwidth: 971.3413 CV score: 472129239743000 \nFixed bandwidth: 971.3377 CV score: 472129239211951 \nFixed bandwidth: 971.34 CV score: 472129238819453 \nFixed bandwidth: 971.3405 CV score: 472129238593600 \nFixed bandwidth: 971.3408 CV score: 472129238647549 \nFixed bandwidth: 971.3403 CV score: 472129239624159 \nFixed bandwidth: 971.3406 CV score: 472129239431032 \nFixed bandwidth: 971.3404 CV score: 472129239241864 \nFixed bandwidth: 971.3405 CV score: 472129239130278 \nFixed bandwidth: 971.3405 CV score: 472129238832217 \n\n\n\n\n\n\n\n\nTip\n\n\n\nThe longlat argument is set to “FALSE” because we have already transformed the projected coordinates earlier. Set to “TRUE” if we are using long, lat coordinates as inputs.\n\n\nThe result shows that the recommended bandwidth is 971.3405 metres (refer to the last line of the report).\n\n\n\n\n\n\nQuiz:\n\n\n\n\nDo you know why it is in metres?\nReply: The Projected CRS of SVY21 and transformed equivalent under EPSG:3414 for the URA Master Plan 2014’s planning subzone boundaries are measured in metres.\n\n\n\n\n\n6.9.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the GWR model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below is used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 22:26:24 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value             Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877    0.000001196976743 ***\n   AREA_SQM               12777.52     367.48  34.771 < 0.0000000000000002 ***\n   AGE                   -24687.74    2754.84  -8.962 < 0.0000000000000002 ***\n   PROX_CBD              -77131.32    5763.12 -13.384 < 0.0000000000000002 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950             0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651    0.000003613932545 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332             0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179    0.000000255705220 ***\n   PROX_PARK             570504.81   65507.03   8.709 < 0.0000000000000002 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654             0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043    0.000000001927962 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074    0.000000441637621 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791             0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120             0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228    0.000000000000798 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 0.00000000000000022 \n   ***Extra Diagnostic information\n   Residual sum of squares: 812060890958409\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                 Min.       1st Qu.        Median       3rd Qu.\n   Intercept            -35988365.488   -519979.772    767797.337   1741234.306\n   AREA_SQM                  1000.279      5275.779      7474.018     12300.971\n   AGE                    -134749.495    -20813.274     -8626.003     -3778.370\n   PROX_CBD             -77047270.137   -236081.916    -83599.576     34645.575\n   PROX_CHILDCARE        -6009730.044   -336665.767    -97425.465    290074.489\n   PROX_ELDERLYCARE      -3500042.494   -159702.666     31970.528    195774.638\n   PROX_URA_GROWTH_AREA  -3016996.080    -82013.243     70749.084    226119.338\n   PROX_MRT              -3528172.076   -658357.468   -188328.987     36922.070\n   PROX_PARK             -1206240.925   -217315.894     35383.116    413347.109\n   PROX_PRIMARY_SCH     -22695027.094   -170660.239     48471.907    515551.477\n   PROX_SHOPPING_MALL    -7258466.404   -166844.608    -10516.913    159227.798\n   PROX_BUS_STOP         -1467612.709    -45206.664    376007.005   1166445.776\n   NO_Of_UNITS              -1317.036      -248.223       -30.846       254.959\n   FAMILY_FRIENDLY       -2274938.102   -111395.125      7621.363    161067.297\n   FREEHOLD              -9206722.091     38073.481    151694.047    375277.911\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 253407016000767 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 22:26:25 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.14.\n\n\n\n6.9.2 Build Adaptive Bandwidth GWR Model\nIn this section, we calibrate the gwr-absed hedonic pricing model by using the adaptive bandwidth approach.\n\n6.9.2.1 Compute the adaptive bandwidth\nSimilar to the earlier section, we first use bw.ger() to determine the recommended data points to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 795240067952916 \nAdaptive bandwidth: 561 CV score: 766736415369131 \nAdaptive bandwidth: 354 CV score: 695345377846985 \nAdaptive bandwidth: 226 CV score: 615223032444228 \nAdaptive bandwidth: 147 CV score: 567437338972766 \nAdaptive bandwidth: 98 CV score: 542674453374480 \nAdaptive bandwidth: 68 CV score: 516811696101366 \nAdaptive bandwidth: 49 CV score: 485963124854345 \nAdaptive bandwidth: 37 CV score: 464651804391025 \nAdaptive bandwidth: 30 CV score: 442208792500332 \nAdaptive bandwidth: 25 CV score: 443081571798103 \nAdaptive bandwidth: 32 CV score: 450560182354864 \nAdaptive bandwidth: 27 CV score: 446217190611572 \nAdaptive bandwidth: 30 CV score: 442208792500332 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n6.9.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nThe code below can be used to display the model output.\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 22:26:30 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value             Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877    0.000001196976743 ***\n   AREA_SQM               12777.52     367.48  34.771 < 0.0000000000000002 ***\n   AGE                   -24687.74    2754.84  -8.962 < 0.0000000000000002 ***\n   PROX_CBD              -77131.32    5763.12 -13.384 < 0.0000000000000002 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950             0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651    0.000003613932545 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332             0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179    0.000000255705220 ***\n   PROX_PARK             570504.81   65507.03   8.709 < 0.0000000000000002 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654             0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043    0.000000001927962 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074    0.000000441637621 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791             0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120             0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228    0.000000000000798 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 0.00000000000000022 \n   ***Extra Diagnostic information\n   Residual sum of squares: 812060890958409\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                  Min.        1st Qu.         Median\n   Intercept            -134874192.014    -246693.174     779280.345\n   AREA_SQM                   3318.817       5628.499       7782.486\n   AGE                      -96746.436     -29287.820     -14042.717\n   PROX_CBD               -2533033.423    -162556.006     -77241.667\n   PROX_CHILDCARE         -1279036.792    -201752.740       8715.804\n   PROX_ELDERLYCARE       -1621217.923     -92049.948      61029.215\n   PROX_URA_GROWTH_AREA   -7268553.018     -30350.048      45868.678\n   PROX_MRT              -43780537.042    -672818.354    -221150.271\n   PROX_PARK              -2902027.105    -167820.665     116014.299\n   PROX_PRIMARY_SCH        -864176.067    -166266.939      -7785.325\n   PROX_SHOPPING_MALL     -1827150.999    -131754.889     -14049.330\n   PROX_BUS_STOP          -2057895.720     -71460.777     411041.226\n   NO_Of_UNITS               -2199.274       -236.853        -34.699\n   FAMILY_FRIENDLY         -598786.697     -50926.596      26172.549\n   FREEHOLD                -163402.522      40765.437     190227.133\n                               3rd Qu.     Max.\n   Intercept               1619360.306 18758355\n   AREA_SQM                  12737.761    23064\n   AGE                       -5611.856    13303\n   PROX_CBD                   2662.370 11346650\n   PROX_CHILDCARE           377776.875  2892127\n   PROX_ELDERLYCARE         281843.735  2465671\n   PROX_URA_GROWTH_AREA     246125.428  7384059\n   PROX_MRT                 -74593.417  1186242\n   PROX_PARK                465717.595  2588497\n   PROX_PRIMARY_SCH         432218.459  3381462\n   PROX_SHOPPING_MALL       137986.314 38038564\n   PROX_BUS_STOP           1207119.672 12081592\n   NO_Of_UNITS                 116.573     1010\n   FAMILY_FRIENDLY          224806.072  2072414\n   FREEHOLD                 379604.132  1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 252822722477010 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 22:26:30 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\n6.9.3 Decoding the GWR Outputs\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing in the regression model.\nPredicted: these are the estimated (or fitted) y values computed by the GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of 0 and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produced by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n6.9.4 Convert SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, we use glimpse() to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\nThe predicted Selling Price for the transaction is summarised as follow:\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n6.9.5 Visualise Local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\n  tm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nWe then turn off interactive view.\n\ntmap_mode(\"plot\")\n\n\n6.9.5.1 Visualise the Local R2 by URA Planning Region\nWe can print the maps with Local R2 values by Planning Region\n\nplanning_region <- c(\"CENTRAL REGION\",\"WEST REGION\",\"EAST REGION\",\"NORTH-EAST REGION\", \"NORTH REGION\")\n\nfor (region in planning_region){\n  print(tm_shape(mpsz_svy21[mpsz_svy21$REGION_N==region, ])+\n    tm_polygons()+\n    tm_shape(condo_resale.sf.adaptive) + \n    tm_bubbles(col = \"Local_R2\",\n             size = 0.15,\n             border.col = \"gray60\",\n             border.lwd = 1) +\n    tm_layout(main.title = paste(\"Local R2 for\", region),\n            main.title.position = \"center\",\n            main.title.size = 1.0)\n  )\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.9.6 Visualise coefficient estimates\nThe code chunk below is used to create an interactive point symbol map.\n\n# Switch to interactive plot\ntmap_mode(\"view\")\n\n# Plot the coefficient estimates\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n# We set sync = TRUE so that both maps move together when we select a location of the map.\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=1, nrow = 2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe then switch back to view mode\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex4.html#reference",
    "href": "In-Class_Ex/In-Class_Ex4.html#reference",
    "title": "In-Class Exercise 4",
    "section": "6.10 Reference",
    "text": "6.10 Reference\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453\nDr. Kam TIn Seong (2022) , “ISSS602 Data Analytics Lab Lesson 5: The Granddaddy of All Models: Regression Analysis” Version 2.14.0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Updated on 9-Dec-2022\n(First published on: 30-Nov-2022)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#overview",
    "href": "Take-home_Ex/Take-home_Ex1.html#overview",
    "title": "Take-home Exercise 1",
    "section": "1 Overview",
    "text": "1 Overview\n\n1.1 Setting the Scene\nWater is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have sufficient access to clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issue in many countries globally, especially in Africa.\nTo provide clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project was initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. The data is collected based on WPDx Data Standard.\n\n\n1.2 Objectives\nGeospatial analytics hold tremendous potential to address complex problems facing our society.\nIn this study, we will apply appropriate global and local measures of spatial association techniques to reveal the spatial patterns of non-functional water points in Nigeria.\n\n\n1.3 The Data\nGeospatial data\nFor this assignment, 2 geospatial data sets will be used.\n\ngeo_export: It contains information on the water points in Nigeria. The data is available from WPdx Global Data Repositories and we are using the WPdx+ data set. The data is extracted and downloaded in shapefile format.\n\nnga_lga2: The file contains Nigeria Level-2 Administrative Boundary (also known as Local Government Area (LGA)) polygon features GIS data will be used. The data is downloaded from The Humanitarian Data Exchange portal\n\n\n\n1.4 The Tasks\nThe specific tasks of this assignments are:\n\nUsing appropriate sf method, import the shapefiles into R and save them in a simple feature data frame format. The Projected Coordinate Systems of Nigeria is EPSG: 26391.\nUsing appropriate tidyr and dplyr methods to derive the proportion of functional and non-functional water point at the LGA level.\nCombining the geospatial data frames into a Simple Feature (sf) data frame.\nPerforming clusters and outliers analysis by using appropriate local measures of spatial association methods.\nPerforming hotspot areas analysis by using appropriate local measures of spatial association methods.\n\n\n\n1.5 Thematic Mapping\n\nPlot maps to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by the tmap package.\n\n\n\n1.6 Analytical Mapping\n\nPlot hotspot areas and outliers/clusters maps of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#setup",
    "href": "Take-home_Ex/Take-home_Ex1.html#setup",
    "title": "Take-home Exercise 1",
    "section": "2 Setup",
    "text": "2 Setup\n\n2.1 Import and load relevant packages into R environment\nThe R packages we use for this analysis are:\n\nsf: used for importing, managing, and processing geospatial data\ntidyverse: a collection of packages for data manipulation, visualisation and other data science related tasks\ntmap: used for creating thematic maps, such as choropleth and bubble maps\nspdep: used to create spatial weights matrix objects and related calculations (e.g. spatially lag attributes)\nfunModeling: a library for rapid Exploratory Data Analysis\nunits: for measurement units in R vectors, matrices and array\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling, units)\n\n\n\n2.2 Import the geospatial data sets\n\n2.2.1 Import water point geospatial data\nWe import the geo_export shapefile using st_read() of sf library and use filter() of the dplyr package to extract water point records in Nigeria\n\nwp = st_read(dsn = \"Take-home_Ex1/geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\n\n\n\n\n\n\nWe do not transform the geographic data at this point as we will be using st_intersects() in a later step to process the data. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\n\n\n\n\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwrite_rds(wp, \"Take-home_Ex1/geodata/wp_nga.rds\")\n\n\n\n2.2.2 Import Nigeria LGA boundary data\nWe use st_read() to import the LGA boundary data into sf data table\n\nnga = st_read(dsn = \"Take-home_Ex1/geodata\",\n               layer = \"nga_lga2\",\n               crs = 4326)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1",
    "section": "3 Data Wrangling",
    "text": "3 Data Wrangling\n\n3.1 Recode the values in the status_cle column\nThe status_cle column in the wp_nga.rds file indicates the status of the water point when it was last assessed.\nWe do a count of the diferrent values in the status_cle column using freq() of the funModeling package.\n\nwp_nga = read_rds(\"Take-home_Ex1/geodata/wp_nga.rds\")\n\nfreq(data=wp_nga,input = 'status_cle')\n\n\nGiven that we are going to plot maps relating to the proportion of functional and non-functional water points in Nigeria, we need to first compute the total number of functional, non-functional and blank value (denoted by “NA”) water points before we can derive the proportion of non-functional and functional water points for each LGA.\nTo do so, we perform the following steps:\n\nWe use the replace_na() method to recode all the NA values in status_cle column of the wp_nga data table into Unknown\n\nwp_nga = wp_nga %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\nWe use filter() of dplyr to create data tables which group (i) functional, (2) non functional and (3) water points with unknown status together\n\n# Extract functional water points\nwpt_functional = wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n# Extract non-functional water points\nwpt_nonfunctional = wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n# Extract water points with Unknown value\nwpt_unknown = wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n\n3.2 Perform Point-in-Polygon Count\nWe use st_intersects() of sf package to compute the number of functional, non-functional and unknown status water points in each LGA.\n\nnga_wp = nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\n\n\n3.3 Save the data table for spatial analysis\nWe derive two fields namely pct_functional and pct_non-functional using the mutate() of dplyr package. To keep the file size small, we use select() of dplyr to retain only columns 3,4,9,10, 18,19,20,21,22,and 23.\n\nnga_wp = nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nThereafter ,we save the updated nga_wp sf data table into rds format for our geospatial analysis\n\nwrite_rds(nga_wp, \"Take-home_Ex1/geodata/nga_wp.rds\")\n\n\n\n3.4 Visualise the geographic distribution of water points\nWe first load the nga_wp sf.data frame in the R environment.\n\n# Load the nga_wp sf data file prepare in the previous steps\nnga_wp <- read_rds(\"Take-home_Ex1/geodata/nga_wp.rds\")\n\nNext, the plot the choropleth by the status of the water points.\n\n# Plot the various types of water points\ntotal = qtm(nga_wp, \"total wpt\") + \n        tm_layout(main.title = \"Total no. of \\nwater points\",\n                  main.title.position = \"center\",\n                  main.title.size = 1.5,\n                  legend.height = 0.26,\n                  legend.width = 0.40) \n\nwp_functional = qtm(nga_wp, \"wpt functional\") + \n                tm_layout(main.title = \"Total no. of functional \\nwater points\",\n                  main.title.position = \"center\",\n                  main.title.size = 1.5,\n                  legend.height = 0.26,\n                  legend.width = 0.40) \n\nwp_nonfunctional = qtm(nga_wp, \"wpt non-functional\") + \n                tm_layout(main.title = \"Total no. of non-functional \\nwater points\",\n                  main.title.position = \"center\",\n                  main.title.size = 1.5,\n                  legend.height = 0.26,\n                  legend.width = 0.40)\n\nunknown <- qtm(nga_wp, \"wpt unknown\") + \n                tm_layout(main.title = \"Total no. of  water points \\nwith unknown status\",\n                  main.title.position = \"center\",\n                  main.title.size = 1.5,\n                  legend.height = 0.26,\n                  legend.width = 0.40)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#data-processing",
    "href": "Take-home_Ex/Take-home_Ex1.html#data-processing",
    "title": "Take-home Exercise 1",
    "section": "4 Data Processing",
    "text": "4 Data Processing\nBefore we start working on our data, we first check for and address the following to ensure that they do not affect subsequent computations in our analysis:\n\nInvalid geometries\nmissing values\n\n\n4.1 Invalid geometries\nWe use the st_is_valid() function from sf package to check whether the geometries in nga_wp are valid. We wrap the st_is_valid() using length() function to count the number of invalid geometries returned.\n\nlength(which(st_is_valid(nga_wp) == FALSE))\n\n[1] 0\n\n\nThis is no invalid geometry\n\n\n4.2 Missing values\nWe use the following code chunk to check every row in the nga_wp sf data table to see if there is any NA value. If so, to return these records.\n\nnga_wp[rowSums(is.na(nga_wp))!=0,]\n\nSimple feature collection with 13 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 8.553504 ymin: 4.798471 xmax: 14.67882 ymax: 13.71406\nGeodetic CRS:  WGS 84\nFirst 10 features:\n       ADM2_EN ADM2_PCODE ADM1_PCODE ADM0_EN total wpt wpt functional\n3       Abadam   NG008001      NG008 Nigeria         0              0\n86     Bakassi   NG009005      NG009 Nigeria         0              0\n241     Geidam   NG036006      NG036 Nigeria         0              0\n250      Gubio   NG008009      NG008 Nigeria         0              0\n252      Gujba   NG036007      NG036 Nigeria         0              0\n261   Guzamala   NG008010      NG008 Nigeria         0              0\n400       Kaga   NG008014      NG008 Nigeria         0              0\n406 Kala/Balge   NG008015      NG008 Nigeria         0              0\n447     Kukawa   NG008017      NG008 Nigeria         0              0\n473   Madagali   NG002010      NG002 Nigeria         0              0\n    wpt non-functional wpt unknown pct_functional pct_non-functional\n3                    0           0            NaN                NaN\n86                   0           0            NaN                NaN\n241                  0           0            NaN                NaN\n250                  0           0            NaN                NaN\n252                  0           0            NaN                NaN\n261                  0           0            NaN                NaN\n400                  0           0            NaN                NaN\n406                  0           0            NaN                NaN\n447                  0           0            NaN                NaN\n473                  0           0            NaN                NaN\n                          geometry\n3   MULTIPOLYGON (((13.83477 13...\n86  MULTIPOLYGON (((8.580903 4....\n241 MULTIPOLYGON (((12.47754 12...\n250 MULTIPOLYGON (((13.03061 12...\n252 MULTIPOLYGON (((12.33826 11...\n261 MULTIPOLYGON (((13.5701 12....\n400 MULTIPOLYGON (((12.56773 11...\n406 MULTIPOLYGON (((14.58302 11...\n447 MULTIPOLYGON (((14.1372 12....\n473 MULTIPOLYGON (((13.69222 10...\n\n\nThe results show that there are 13 records with missing values, primarily in the pct_functional and pct_non-functional columns. The 13 LGAs have no water point record at all and this resulted in a divisional error (and generating a NaN value) when we compute the percentage of functional and non-functional water points.\nWe will remove these 13 records with missing values to avoid any unintended computational issue in our analysis downstream with the following code chunk.\n\nnga_wp_processed <- na.omit(nga_wp,c(\"pct_non-functional\"))\n\n\n\n4.3 Transform coordinate system\nWe first check the coordinate system of nga_wp_processed using st_crs() of the sf package.\n\nst_crs(nga_wp_processed)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nWe note that the geometry information is reflected under WGS 84, a Geographic Coordinate System (GCS) which uses a 3-dimensional spherical surface to define locations on the earth. For our study, we will transform the geometry to Projected Coordinate System. This translates GCS data into a 2-dimensional surface using st_transform() of the sf package. The Projected Coordinate Systems of Nigeria is EPSG: 26391.\n\nnga_wp_projected <- st_transform(nga_wp_processed, crs=26391)\n\n# check to ascertain if the CRS is correctly projected\nst_crs(nga_wp_projected)\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n\n\n4.4 Checking the distribution of the attribute\nWe note that the % value of non-functional water points are right-skewed by plotting histogram using ggplot.\n\nggplot(data=nga_wp_projected, aes(x= as.numeric(`pct_non-functional`)))+\n  geom_histogram(bins=20,\n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(y='Frequency',x=\"% of non-functional water points\", title = \"Distribution of % of non-functional water points\")\n\n\n\n\nWe also plot the % value of functional water points using ggplot as follows:\n\nggplot(data=nga_wp_projected, aes(x= as.numeric(`pct_functional`)))+\n  geom_histogram(bins=20,\n                 color=\"black\", \n                 fill=\"blue\") +\n  labs(y='Frequency',x=\"% of functional water points\", title = \"Distribution of % of functional water points\")\n\n\n\n\nThe distribution of the proportion of functional water points is slightly skewed as well.\n\n\n4.5 Visualise the processed data\nWe have completed the standard pre-processing steps and let us visualise the water data on the map with the following code chuck. We use the jenks method to classify the data points as it optimises class variances to determine the best arrangement off values into different classes\nTo visualise the proportion of non-functional water points over Nigera\n\ntm_shape(nga_wp_projected) +\n  tm_fill(\"pct_non-functional\", \n          style = \"jenks\", \n          palette = \"Blues\",\n          title = \"% of non-functional wps\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Proportion of non-functional \\nwater points\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\n\n\n\nWe will can roughly spot that the western part (especially in the south-west region) of the country has relatively more non-functional points.\nTo visualise the proportion of functional water points over Nigera\n\ntm_shape(nga_wp_projected) +\n  tm_fill(\"pct_functional\", \n          style = \"jenks\", \n          palette = \"Greens\",\n          title = \"% of functional wps\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Proportion of functional \\nwater points\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\n\n\n\nFrom the map above, we see that north east and north west of Nigeria have higher proportion of functional water points."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#global-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex1.html#global-spatial-autocorrelation",
    "title": "Take-home Exercise 1",
    "section": "5 Global Spatial Autocorrelation",
    "text": "5 Global Spatial Autocorrelation\nWe start by first examining if there is global spatial autocorrelation among LGAs with non-functional water points, which is the objective of our study, using the following hypothesis:\nH0: The distribution of non-functional water points is a random phenomenon\nH1: The distribution of non-functional water points is spatially dependent\nWe set the level of significance, α at 0.05.\n\n5.1 Select the appropriate Spatial Weight for our analysis\nThere are 2 main criterion for defining spatial weights:\n\nContiguity or Adjacency criterion\nDistance criterion:\n\nFixed Distance\nAdaptive Distance\n\n\nGiven that we have removed 13 LGAs with missing values from the data table, applying the Contiguity criterion for spatial weights may not be ideal as we have suppressed the number of connections among contiguous LGAs. We generate the Neighbour List with Queen contiguity approach using poly2nd() of spdep package below and note that the number of neighbors for the LGAs range from 1 to 14, which is not very consistent.\n\nwm_q = poly2nb(nga_wp_projected,queen=TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n138 509 525 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nTo overcome the reservations we have on using the Contiguity criterion to determine the spatial weights, one way is to use distance-based criterion and there are 2 schemes available - Fixed Distance and Adaptive Distance\nFor Fixed Distance scheme, while we can make use of dnearneigh() function of spdep package to compute the distance weight matrix distance where all LGAs have at least 1 neighbor, the LGA polygons are of very different sizes and therefore we may generate excessive/limited number of neighbors for some LGAs by using a fixed distance. For instance, bigger regions at the boundaries of the map tend to have fewer neighbors and hence are less likely to obtain statistically significant results. To get a sense of how different the LGAs are in terms of land size, we plot the following histogram on the area of the LGAs using st_area() of sf package.\n\noptions(scipen=999)\n\nnga_wp_projected$area = st_area(nga_wp_projected)\n\nggplot(data=nga_wp_projected, aes(x= area))+\n  geom_histogram(bins=20,\n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(y='Frequency',x=\"Area\", title = \"Distribution of LGA areas\")\n\n\n\n\nWe also print out the relevant area statistics to show the wide range in land area of the LGAs\n\nsummary(st_area(nga_wp_projected))\n\n       Min.     1st Qu.      Median        Mean     3rd Qu.        Max. \n    8596599   277850189   696268537  1156093016  1472712805 11250590762 \n\n\nA solution to the concerns for the Contiguity and Fixed Distance criterion is to adopt the Adaptive Distance scheme where we preset a fixed number of k neighbors per LGA. All LGAs are hence connected by the same number of neighbours.\nBased on the discussion above, we will use Adaptive Distance weight matrix and set k = 8 for our subsequent analysis to strike a balance between not having too high a k value (which may have a smoothening out effect on the values) and being able to obtain statistically-sound results eventually. Setting k = 8 also takes into account that the distribution of the proportion non-functional water points is skewed as seen in Section 4.4.\n\n\n5.2 Compute the Adaptive Distance weight matrix\n\n5.2.1 Derive the centroid of every LGA\nWe need the centroid associated with each LGA before we can work out the neighbor list.\nTo get the longitude values of the centroids, we map the st_centroid() function over the geometry column of our projected sf table and access the longitude value through double bracket notation [[]] and 1.\n\nlongitude <- map_dbl(nga_wp_projected$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude but access the second value of each centroid with [[2]].\n\nlatitude <- map_dbl(nga_wp_projected$geometry, ~st_centroid(.x)[[2]])\n\nThereafter we combined the longitude and latitude into the same object and review the first few records to check that the coordinates of the centroids are correctly formatted.\n\n# Combine the longitude and latitude values into an array object\ncoords = cbind(longitude,latitude)\n\n# Insepct the first few records of the object\nhead(coords)\n\n     longitude latitude\n[1,] 549364.04 123694.9\n[2,] 547123.41 120376.5\n[3,] 489057.42 534262.6\n[4,] 593718.21 113824.1\n[5,] 642618.69 251222.3\n[6,]  84389.95 356433.0\n\n\nThe first 6 sets of centroid coordinates appear fine.\n\n\n5.2.2 Derive the Neighbor List\nNext. we use the knearneigh() of spdep package to obtain the Neighbor List (nb) object for the LGAs, setting k = 8\n\nknn8 <- knn2nb(knearneigh(coords, k=8))\nknn8\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 6088 \nPercentage nonzero weights: 1.051248 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\n\n5.2.3 Convert the Neighbor List object into a Spatial Weights object\nFinally, we use the nb2listw() of spdep package to convert the Neighbor List into a Spatial Weights object.\n\nknn8_lw <- nb2listw(knn8, style = 'B')\n\n# Inspect the spatial weights object\nsummary(knn8_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 6088 \nPercentage nonzero weights: 1.051248 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n761 \n761 least connected regions:\nwith 8 links\n761 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 761 579121 6088 10950 198564\n\n\n\n\n\n5.3 Run the Moran’s I test for Global Autocorrelation\nWe perform the Moran’s I statistical testing using moran.test() of spdep package. The Moran’s I test measures how the proportions of non-functional water points differ in the study area as a whole.\n\nmoran.test(nga_wp_projected$`pct_non-functional`, \n           listw=knn8_lw, \n           zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp_projected$`pct_non-functional`  \nweights: knn8_lw    \n\nMoran I statistic standard deviate = 26.388, p-value <\n0.00000000000000022\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4496039329     -0.0013157895      0.0002919996 \n\n\nThe p-value is <0.05 implying that we can reject the null hypothesis and conclude that the spatial distribution of non-functional water points is not a random phenomenon. The positive Moran’s I statistic of 0.450 indicates that there’s some some degree of clustering of non-functional water points in our study area.\n\n\n5.4 Run the Geary’s C test for Global Autocorrelation\nTo confirm that there is global clustering of non-functional water points, we perform the Geary’s C statistical test using geary.test() of spdep package. The Geary’s C test measures how the proportion of the non-functional water points in LGAs differ from their neighbors.\n\ngeary.test(nga_wp_projected$`pct_non-functional`, \n           listw=knn8_lw, \n           zero.policy = TRUE)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp_projected$`pct_non-functional` \nweights: knn8_lw \n\nGeary C statistic standard deviate = 25.29, p-value <\n0.00000000000000022\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.5393883718      1.0000000000      0.0003317272 \n\n\nThe Geary’s C statistic is between 0 and 1, indicating that there is global clustering and the proportion of non-functional water points between the LGAs and their neighbors tend to be similar in some regions of Nigeria. The p-value is <0.05 implying that the result is statistically significant.\nFrom the Moran’s I and Geary’s G tests, we conclude that the spatial distribution of non-functional water points is not a random phenomenon and there is indeed clustering of faulty water points."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take-home Exercise 1",
    "section": "6 Cluster and Outlier Analysis",
    "text": "6 Cluster and Outlier Analysis\nIn this section, we compute the Local Indicators of Spatial Association (“LISA”) statistics to evaluate the existence of clusters and outliers in the spatial arrangement of non-functional water points across Nigeria.\n\n6.1 Compute the local Moran’s I\nThe Local Moran’s I statistic is relatively similar to the Global Moran’s I in that it is providing a measure of how similar locations are to their neighbors. However, the difference is that each LGA receive its own Moran’s I value, as well as its own variance, z value, expected I, and variance of I\nWe use the localmoran() of spdep package to compute the local Moran’s I for non-functional water points.\n\nlocalMI <- localmoran(nga_wp_projected$`pct_non-functional`, knn8_lw)\n\n# Inspect the first few records generated\nhead(localMI)\n\n         Ii         E.Ii   Var.Ii      Z.Ii Pr(z != E(Ii))\n1  5.205163 -0.006635614 4.998981  2.331025    0.019752051\n2  4.755332 -0.004013898 3.024887  2.736483    0.006209989\n3  1.484009 -0.013172741 9.915650  0.475460    0.634459103\n4  6.929392 -0.005959689 4.490148  3.272941    0.001064347\n5  5.129117 -0.008452809 6.366528  2.036134    0.041736858\n6 -1.311319 -0.001416732 1.068001 -1.267515    0.204971134\n\n\nThe column on the far right provides the p-values. We can relate these p-values to different confidence levels (e.g. 99%, 95%, etc.) in order to draw a conclusion about the spatial distribution of non-functional water points across the LGAs.\nFor ease of subsequent analysis, we create a sf data table by appending the local Moran’s I dataframe (i.e. localMI) onto nga_wp_projected data table. At the same time, we rename the p-value column for the local Moran’s I to “Pr.li”.\n\nnga_wp_projected.localMI <- cbind(nga_wp_projected,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n6.2 Map the local Moran’s I statistic and the Moran’s I p-value\nUsing choropleth mapping functions of tmap package, we plot 2 maps:\n\nMap 1 representing the local Moran’s I values\nMap 2 representing the local Moran’s I p-values\n\nFor non-functional water-points\n\n# 1. Map 1 representing the Local Moran's I values\n\nlocalMI.map <- tm_shape(nga_wp_projected.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"Local Moran's I statistics\",\n          palette = \"BrBG\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map 1: Local Moran's I statistics \\n(Non-functional water points)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.26, \n            legend.width = 0.40)\n\n# 2. Map representing the local Moran's I p-values\n\npvalue.map <- tm_shape(nga_wp_projected.localMI) +\n  tm_fill(col = \"Pr.Ii\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-BuPu\",\n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map 2: Local Moran's I p-values \\n(non-functional water points)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.26, \n            legend.width = 0.40)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\nFor functional water points\nSimilarly, we map the local Moran I statistics for functional water points by repeating the steps in Sections 6.1 and 6.2\n\n# Generate the local Moran's I\nlocalMI_func <- localmoran(nga_wp_projected$`pct_functional`, knn8_lw)\n\n# Append local Moran's I values to data frame\nnga_wp_projected.localMI_func <- cbind(nga_wp_projected,localMI_func) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n# Map 1 representing the Local Moran's I values\n\nlocalMI_func.map <- tm_shape(nga_wp_projected.localMI_func) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"Local Moran's I statistics\",\n          palette = \"BrBG\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map 1a: Local Moran's I statistics \\n(functional water points)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.26, \n            legend.width = 0.40)\n\n# 2. Map representing the local Moran's I p-values\n\npvalue_func.map <- tm_shape(nga_wp_projected.localMI_func) +\n  tm_fill(col = \"Pr.Ii\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-BuPu\",\n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map 2a: Local Moran's I p-values \\n(functional water points)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.26, \n            legend.width = 0.40)\n\ntmap_arrange(localMI_func.map, pvalue_func.map, asp=1, ncol=2)\n\n\n\n\n\n\n6.3 Plot the LISA map\nBefore plotting the map, we need to first prepare the map classes. The preparatory steps involved are as follow:\n\nCreate a vector to contain the cluster class: quadrant\nDerive the spatially lagged values for proportion of non-functional water points and center them around the mean value using lag.listtw() of spdep package: DV\nCenter the local Moran’s I values around the mean value: LM_I\nSet the level of significance for the local Moran’s I statistic: signif\nDefine and assign the classes based on DV and LM_I values.\n\n[DV <0 & LM_I>0] <- 1 Low-Low\n[DV >0 & LM_I<0] <- 2 Low-High\n[DV <0 & LM_I<0] <- 3 High-Low\n[DV >0 & LM_I>0] <- 4 High-High\n\nAllocate non-significant Moran’s I value to 0\n\nFor non-functional water-points\n\n# Step 1\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\n# Step 2\nnga_wp_projected$`lag_pct_non-functional` <- lag.listw(knn8_lw, nga_wp_projected$`pct_non-functional`)\nDV <- nga_wp_projected$`lag_pct_non-functional` - mean(nga_wp_projected$`lag_pct_non-functional`)     \n\n# Step 3\nLM_I <- localMI[,1] - mean(localMI[,1])   \n\n# Step 4\nsignif <- 0.05       \n\n# Step 5\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4\n\n# Step 6\nquadrant[localMI[,5]>signif] <- 0\n\nUsing choropleth mapping functions of tmap package, we plot 2 additional maps:\n\nMap 3 representing the proportion of non-functional water points\nMap 4 representing the LISA map of spatial clusters\n\n\n# Map 3 representing the Proportion of non-functional water points\nnon_functional_wp <- tm_shape(nga_wp_projected) +\n  tm_fill(\"pct_non-functional\", \n          style = \"jenks\", \n          palette = \"Blues\",\n          title = \"% of non-functional wps\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map 3: Proportion of non-functional \\nwater points\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\n# Map 4 representing the LISA map of spatial clusters\nnga_wp_projected.localMI$quadrant <- quadrant\ncolors <- c(\"#999999\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(nga_wp_projected.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = \"Map 4: LISA map of spatial clusters \\n(non-functional water points)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\ntmap_arrange(non_functional_wp, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\nFor functional water-points\nWe repeat the steps above to plot the maps for functional water points.\n\n# Step 1\nquadrant_func <- vector(mode=\"numeric\",length=nrow(localMI_func))\n\n# Step 2\nnga_wp_projected$`lag_pct_functional` <- lag.listw(knn8_lw, nga_wp_projected$`pct_functional`)\nDV_func <- nga_wp_projected$`lag_pct_functional` - mean(nga_wp_projected$`lag_pct_functional`)     \n\n# Step 3\nLM_I_func <- localMI_func[,1] - mean(localMI_func[,1])   \n\n# Step 4\nsignif <- 0.05       \n\n# Step 5\nquadrant_func[DV_func <0 & LM_I_func>0] <- 1\nquadrant_func[DV_func >0 & LM_I_func<0] <- 2\nquadrant_func[DV_func <0 & LM_I_func<0] <- 3  \nquadrant_func[DV_func >0 & LM_I_func>0] <- 4\n\n# Step 6\nquadrant_func[localMI_func[,5]>signif] <- 0\n\n# Map 3a representing the Proportion of non-functional water points\nfunctional_wp <- tm_shape(nga_wp_projected) +\n  tm_fill(\"pct_functional\", \n          style = \"jenks\", \n          palette = \"Blues\",\n          title = \"% of functional wps\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map 3a: Proportion of functional \\nwater points\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\n# Map 4a representing the LISA map of spatial clusters\nnga_wp_projected.localMI_func$quadrant_func <- quadrant_func\ncolors <- c(\"#999999\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_func <- tm_shape(nga_wp_projected.localMI_func) +\n  tm_fill(col = \"quadrant_func\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = \"Map 4a: LISA map of spatial clusters \\n(functional water points)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\ntmap_arrange(functional_wp, LISAmap_func, \n             asp=1, ncol=2)\n\n\n\n\n\n\n6.4 Interpretation of LISA analysis results\nOur discussion below will be based on non-functional water points which is the objective of our study.\nMap 3 shows the regions with higher proportion of non-function water points were mainly spread throughout the western part of Nigeria, especially in the south-west region. The Global Moran’s I and Geary’s C computed in sections 4.3.1 and 4.3.2 respectively confirmed that there’s some degree of gloabal clustering of non-functional water points in Nigeria. So this begs the question of where do the clusters of non-functional water points lie. In terms of efforts to review, inspect and repair these faulty water points, it would be more cost effective if we can identify where they are congregated to manage them as a cluster.\nBased on the local Moran’s I values (Map 1) and p-values (Map 2), we observe that significant clusters appear in the north-east and south-west of the country.\nThe LISA map (Map 4) makes it easier for us by highlighting the 4 separate high-high clusters (labelled in the enlarged LISA map below) and, attention should be placed on Clusters 1 and 2 given the wider spread of non-functional water points and larger number of LGAs affected.\n\n\n\n\n\nIt is also interesting to note that most low-low clusters are gathered around the north-east part of the country and it maybe worth investigating why the region has lower proportion of water points failures. Most of the low-high and high-low outliers are adjacent to high-high and low-low clusters, which is understandable given that each LGA’s classification is relative to its neighbors. There are pockets of high-low outliers (in orange) spread across the study area. The local administration of these high-low areas should be alerted to their classification as “outliers” and encouraged to address the seemingly higher proportion of faulty water points vis-a-vis their neighbors ."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Take-home_Ex/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Take-home Exercise 1",
    "section": "7 Hot Spot and Cold Spot Area Analysis",
    "text": "7 Hot Spot and Cold Spot Area Analysis\nHot spots refer to regions with attribute values that are higher relative to its surroundings. We will use Getis-Ord’s Gi statistics to detect such spatial anomalies. The method looks at neighbors within a defined proximity to identify where high or low values cluster spatially. Statistically significant hot-spots are defined as areas of high values where other areas within the neighborhood range also share high values too.\nThe analysis consists of three steps:\n\nDerive spatial weight matrix\nCompute Gi statistics\nMap Gi statistics\n\nWe have accomplished Step 1 in Section 4.2 when we have already derived the Adaptive Distance Weight Matrix. Therefore we will next compute the Gi statistics\n\n7.1 Compute Gi statistics using adaptive distance weight matrix\nWe use the localG() of spdep package to derive the local GI statistics and then create a sf data table by appending the local Gi statistics onto nga_wp_projected data table. At the same time, we rename the Gi statistics column to gstat_adaptive.\nFor non-functional water-points\n\n# Compute the local Gi statistics\ngi.adaptive <- localG(nga_wp_projected$`pct_non-functional`, knn8_lw, zero.policy = FALSE)\n\n\n# Create nga_wp_projected.gi sf data table to store the Gi statistics\nnga_wp_projected.gi <- cbind(nga_wp_projected, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n7.2 Mark the Gi statistics that are significant\nThe localG() function returns a Z-value and we will check this against the critical value setting the level of significance at 0.05. Based on the documentation for locaG() function, the critical values of the statistic under assumptions given in the references for the 95th percentile are for n=1: 1.645, n=50: 3.083, n=100: 3.289, n=1000: 3.886. For our analysis, we will use the more stringent critical value of 3.886 to define statistical significance. We will create an indicator column in the nga_wp_projected.gi data table for Gi statistics that are significant.\nFor non-functional water-points\n\ncritial_value <- 3.886\n\nnga_wp_projected.gi = nga_wp_projected.gi %>%\n  mutate(gi_sig_indicator = case_when(\n    abs(gstat_adaptive)> critial_value ~ \"Yes\",\n    abs(gstat_adaptive)<= critial_value ~ \"No\"\n    ))\n\n\n\n7.3 Map Gi values with adaptive distance weights\nWe use the choropleth mapping functions of tmap package, we plot 2 maps:\n\nMap 5 representing the local Gi Z-values\nMap 6 representing areas with significant Gi Z-values\n\nFor non-functional water-points\n\n# Map 5 representing the Hot and Cold spots using Gi Statistics\nGimap <- tm_shape(nga_wp_projected.gi) +\n  tm_fill(col = \"gstat_adaptive\",\n          style = \"pretty\",\n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)  +\n  tm_layout(main.title = \"Map 5: Gi values with \\nadaptive distance weights\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\n# Map 6 representing the spots with significant Gi Statistics\nGimap_sig <- tm_shape(nga_wp_projected.gi) +\n  tm_fill(col = \"gi_sig_indicator\",\n          palette = \"-RdGy\",\n          title = \"Significant Gi\") + \n  tm_borders(alpha = 0.5)  +\n  tm_layout(main.title = \"Map 6: LGAs with significant \\nGi Statistic\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\ntmap_arrange(Gimap, Gimap_sig, asp=1, ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFor functional water-points\nWe repeat the steps in section 7.1 to 7.3 above to plot the maps for functional water points.\n\n# Compute the local Gi statistics\ngi.adaptive_func <- localG(nga_wp_projected$`pct_functional`, knn8_lw, zero.policy = FALSE)\n\n\n# Create nga_wp_projected.gi sf data table to store the Gi statistics\nnga_wp_projected.gi_func <- cbind(nga_wp_projected, as.matrix(gi.adaptive_func)) %>%\n  rename(gstat_adaptive_func = as.matrix.gi.adaptive_func.)\n\n\n# Identify GI statistics that are signficant\ncritial_value <- 3.886\n\nnga_wp_projected.gi_func = nga_wp_projected.gi_func %>%\n  mutate(gi_sig_indicator_func = case_when(\n    abs(gstat_adaptive_func)> critial_value ~ \"Yes\",\n    abs(gstat_adaptive_func)<= critial_value ~ \"No\"\n    ))\n\n# Map Gi values\n# Map 5a representing the Hot and Cold spots using Gi Statistics for functional water points\nGimap_func <- tm_shape(nga_wp_projected.gi_func) +\n  tm_fill(col = \"gstat_adaptive_func\",\n          style = \"pretty\",\n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)  +\n  tm_layout(main.title = \"Map 5a: Gi values for \\nfunctional water points\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\n# Map 6 representing the spots with significant Gi Statistics\nGimap_sig_func <- tm_shape(nga_wp_projected.gi_func) +\n  tm_fill(col = \"gi_sig_indicator_func\",\n          palette = \"-RdGy\",\n          title = \"Significant Gi\") + \n  tm_borders(alpha = 0.5)  +\n  tm_layout(main.title = \"Map 6a: LGAs with significant Gi \\nstats for functional water points\",\n            main.title.position = \"center\",\n            main.title.size = 1.2)\n\ntmap_arrange(Gimap_func, Gimap_sig_func, asp=1, ncol=2)\n\nVariable(s) \"gstat_adaptive_func\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n7.4 Interpretation of Hot-spot area analysis\nOur discussion below will be based on non-functional water points which is the objective of our study.\nBased on Maps 5 and 6, there are 3 regions of hot-spots and 2 regions of cold-spots that are statistically significant.\n\n\n\n\n\nIn terms of planning and management of repairs, priority can be given to these 3 hot-spot regions (labelled in red octagons) given that the proportional of non-functional water points are relative to their neighbors. It is also worth noting that all 3 hot-spots regions are within high-high clusters under the LISA map.\nFor the 2 cold-spot regions (labelled in blue octagons), it would be interesting to see if there are any factors which influence the lower proportion of faulty water points and consider if they are relevant to prevent the water point malfunctioning at other LGAs, especially those in the high-high clusters or hot-spot regions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex1.html#conclusion",
    "title": "Take-home Exercise 1",
    "section": "8 Conclusion",
    "text": "8 Conclusion\nAs illustrated by this case study, geospatial autocorrelation analysis can help water point policy makers, maintenance teams to identify clusters and hot-spots for non-functional water points, plan for and priortise the repairs. On the other hand, a further examination of the outliers and cold-spots could offer insights on how water point failures can be avoided to provide clean and adequate water supply to improve the lives of the people in Nigeria.\nGeospatial analytics can indeed be a useful tool to help organisations and entities optimise the use of their limited resources and make informed decisions that are data driven.\n\nReferences\n\nMegan Sim, Analysing and Visualing Spatio-temporal patterns of Covid-19 in DKI Jakarta, Indonesia\nSAS Help Centre, The Moran Scatter Plot, SAS Help Center: The Moran Scatter Plot\nWhat is Hotspot Analysis?, What is Hotspot Analysis? | Geospatiality (glenbambrick.com)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2a.html",
    "href": "Take-home_Ex/Take-home_Ex2a.html",
    "title": "In-Class Exercise 2a",
    "section": "",
    "text": "Updated on: 5-Dec-2022\n(First published on: 4-Dec-2022)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2a.html#overview",
    "href": "Take-home_Ex/Take-home_Ex2a.html#overview",
    "title": "In-Class Exercise 2a",
    "section": "1 Overview",
    "text": "1 Overview\nThis note lists the ways to handle aspatial and geospatial data that could be useful for the spatial constrained cluster analysis. It covers:\n\nimporting geospatial data in wkt format into R,\nconverting the tibble data frame with wkt field into sf data frame, and\nperforming point-in-polygon overlay."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2a.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex2a.html#getting-started",
    "title": "In-Class Exercise 2a",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nFor this in-class exercise, 2 R packages will be used. They are:\n\nsf for importing and processing geospatial data,\ntidyverse for importing and processing non-spatial data. It contains\n\nreadr package for importing wkt data, and\ndplyr package will be used to wrangling the data.\n\n\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2a.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex2a.html#import-data",
    "title": "In-Class Exercise 2a",
    "section": "3 Import data",
    "text": "3 Import data\n2 data sets are used for this exercise.\n\n3.1 Water point data set\n\n3.1.1 Import data\nWe use the following code chunk to import the water point data into R environment\n\nwp_nga <- read_csv(\"Take-Home_Ex2a/data/WPdx.csv\",show_col_types = FALSE) %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nThings to note from the code chunk above:\n\nThe original file name is called Water_Point_Data_Exchange_-_PlusWPdx.csv, it has been rename to WPdx.csv for easy encoding.\nInstead of using read.csv() of Base R to import the csv file into R, read_csv() is readr package is used. This is because during the initial data exploration, we notice that there is at least one field name with space between the field name (ie. New Georeferenced Column)\nThe data file contains water point data of many countries. In this study, we are interested on water point in Nigeria on. Hence, filter() of dplyr is used to extract out records belong to Nigeria only.\n\n\n\n3.1.2 Convert Well Know Text data into a sf data frame\nAfter the data are imported into R environment, it is a good practice to review both the data structure and the data table to check if it is in tibble data frame format in R Studio.\nNotice that the newly imported tibble data frame (i.e. wp_nga) contains a field called New Georeferenced Column which represent spatial data in a textual format. In fact, this kind of text file is popularly known as Well Known Text in short wkt.\n\nThe 2 steps needed to convert an asptial data file in wkt format into a sf data frame are:\n\nFirst, st_as_sfc() of sf package is used to derive a new field called Geometry as shown in the code chunk below.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\n\nIf we open wp_nga data frame and scroll to the last field now, we will see that a new field called Geometry has been added as shown below.\n\n\n\nWe use st_sf() to convert the tibble data frame into a sf data frame.\n\n\nwp_sf <- st_sf(wp_nga, crs=4326) \n\nWhen the process is completed, a new sf data frame called wp_sf will be created.\n\nwp_sf\n\n\n\n\n\n3.2 Niegeria LGA level boundary data\nShapefile downloaded from geoBoundaries portal will be imported in st_read of sf package.\n\nnga <- st_read(dsn = \"Take-Home_Ex2a/data\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2a.html#point-in-polygon-overlay",
    "href": "Take-home_Ex/Take-home_Ex2a.html#point-in-polygon-overlay",
    "title": "In-Class Exercise 2a",
    "section": "4 Point in Polygon Overlay",
    "text": "4 Point in Polygon Overlay\nAlthough wp_sf sf data frame consists of a field called #clean_adm2 which by right should provide the LGA name of the water point, it is always a good practice to be more cautious when dealing with external data.\nIn this section, we are going to use a geoprocessing function (or commonly known as GIS analysis) called point-in-polygon overlay to transfer the attribute information in nga sf data frame into wp_sf data frame.\n\nwp_sf_joined <- st_join(wp_sf, nga)\n\nNotice that a new field called shapeName has been added into wp_sf sf data frame. as shown below.\n\nNow we can apply appropriate data wrangling functions of dplyr to extract the necessary clustering variables by using this data frame."
  }
]